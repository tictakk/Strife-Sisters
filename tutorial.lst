#[1]   tutorial.asm
   11                     ;--------------- END INCLUDES ------------------
   12                     
   13           0040      TOP_LINE        = $0040
   14           0130      BOT_LINE        = $0130
   15                     
   16                     ;ASCII_VRAM     = $1000
   17                     ;HEX_VRAM       = ASCII_VRAM+$100
   18           1000      BONKBG_VRAM     = $1000
   19           3000      BONKSP_VRAM     = $3000
   20                     
   21           0F00      SATB_VRAM       = $0F00 ;where to put the Sprite Table in VRAM
   22                     
   23           0020      BATWIDTH        = 32    ;Set to 32, 64, or 128
   24           0020      BATHEIGHT       = 32    ;Set to 32 or 64.
   25                     
   26                     
   27                     
   28                     ; Zero-page variables
   29           2000              .zp
   30  --:2000            hsync_line:     .ds 2
   31  --:2002            direction:      .ds 1
   32  --:2003            vb_count:       .ds 1
   33                     
   34                     ;Higher RAM variables
   35           2200              .bss
   36  --:2200            satb:           .ds 512 ;Sprite Attribute Table Buffer
   37                     
   38                     ;==============================
   39           0000              .code
   40           0000              .bank   $0
   41           E000              .org    $E000
   42                     
   43                     
   44  00:E000            MAIN:
   45                             INTS_OFF                ;DISABLE INTERRUPTS!
       00:E000  03 05             st0  #5
       00:E002  13 00             st1   #$00
       00:E004  23 00             st2   #$00
   46  00:E006  64 02             stz     <direction
   47                             stw     #$0040,<hsync_line
       00:E008  A9 40              lda    LOW_BYTE #$0040
       00:E00A  85 00              sta    LOW_BYTE <hsync_line
       00:E00C  A9 00              lda    HIGH_BYTE #$0040
       00:E00E  85 01              sta    HIGH_BYTE <hsync_line
   48                     
   49                             map     BonkBG
       00:E010  A9 03              lda   #bank(BonkBG)        ; addressable memory
       00:E012  53 04              tam   #page(BonkBG)
   50                             vload   BONKBG_VRAM, BonkBG, $1000
                0001              .if (3 = 3)
                                   stw   #BONKBG_VRAM,<_di
       00:E014  A9 00              lda    LOW_BYTE #BONKBG_VRAM
       00:E016  85 F0              sta    LOW_BYTE <_di
       00:E018  A9 10              lda    HIGH_BYTE #BONKBG_VRAM
       00:E01A  85 F1              sta    HIGH_BYTE <_di
                                   stw   #BonkBG,<_si
       00:E01C  A9 00              lda    LOW_BYTE #BonkBG
       00:E01E  85 EE              sta    LOW_BYTE <_si
       00:E020  A9 40              lda    HIGH_BYTE #BonkBG
       00:E022  85 EF              sta    HIGH_BYTE <_si
                                   stw   #$1000,<_cx     ;WTF is this??? ERRORS!!! "stw   $1000,<_cx"
       00:E024  A9 00              lda    LOW_BYTE #$1000
       00:E026  85 FC              sta    LOW_BYTE <_cx
       00:E028  A9 10              lda    HIGH_BYTE #$1000
       00:E02A  85 FD              sta    HIGH_BYTE <_cx
                                  .else
                                  .endif
       00:E02C  20 58 FE           jsr   load_vram
   51                             map     MyFont
       00:E02F  A9 02              lda   #bank(MyFont)        ; addressable memory
       00:E031  53 04              tam   #page(MyFont)
   52                             ;vload  ASCII_VRAM, MyFont, $0800
   53                             vload   BONKSP_VRAM, SprCHR, $0200      ;Load 2 32x32 sprites
                0001              .if (3 = 3)
                                   stw   #BONKSP_VRAM,<_di
       00:E033  A9 00              lda    LOW_BYTE #BONKSP_VRAM
       00:E035  85 F0              sta    LOW_BYTE <_di
       00:E037  A9 30              lda    HIGH_BYTE #BONKSP_VRAM
       00:E039  85 F1              sta    HIGH_BYTE <_di
                                   stw   #SprCHR,<_si
       00:E03B  A9 00              lda    LOW_BYTE #SprCHR
       00:E03D  85 EE              sta    LOW_BYTE <_si
       00:E03F  A9 50              lda    HIGH_BYTE #SprCHR
       00:E041  85 EF              sta    HIGH_BYTE <_si
                                   stw   #$0200,<_cx     ;WTF is this??? ERRORS!!! "stw   $0200,<_cx"
       00:E043  A9 00              lda    LOW_BYTE #$0200
       00:E045  85 FC              sta    LOW_BYTE <_cx
       00:E047  A9 02              lda    HIGH_BYTE #$0200
       00:E049  85 FD              sta    HIGH_BYTE <_cx
                                  .else
                                  .endif
       00:E04B  20 58 FE           jsr   load_vram
   54                     
   55                             set_bgpal #0, FontPal, #2
       00:E04E  A9 00              lda   #0
       00:E050  85 F8              sta   <_al
                                   stw   #FontPal,<_si
       00:E052  A9 00              lda    LOW_BYTE #FontPal
       00:E054  85 EE              sta    LOW_BYTE <_si
       00:E056  A9 54              lda    HIGH_BYTE #FontPal
       00:E058  85 EF              sta    HIGH_BYTE <_si
                0002              .if 2
       00:E05A  A9 02              lda   #2
                                  .else
                                  .endif
       00:E05C  85 FC              sta   <_cl
       00:E05E  20 00 FE           jsr   set_palette
   56                             set_sprpal #0, SPRPal, #1
       00:E061  A9 00              lda   #0
                                   add   #16
                0000              .if (1 = 2)            ; register A (handle carry
                                  .else
       00:E063  18                 clc
       00:E064  69 10              adc    #16
                                  .endif
       00:E066  85 F8              sta   <_al
                                   stw   #SPRPal,<_si
       00:E068  A9 40              lda    LOW_BYTE #SPRPal
       00:E06A  85 EE              sta    LOW_BYTE <_si
       00:E06C  A9 54              lda    HIGH_BYTE #SPRPal
       00:E06E  85 EF              sta    HIGH_BYTE <_si
                0002              .if 2
       00:E070  A9 01              lda   #1
                                  .else
                                  .endif
       00:E072  85 FC              sta   <_cl
       00:E074  20 00 FE           jsr   set_palette
   57                     
   58  00:E077  20 D7 E1          jsr     Clear_BAT
   59                     
   60                             ;stw    #Intro_Text,<_si ;Point to text string
   61                             ;stw    #$0020,<_di      ;Point on-screen
   62                             ;jsr    Print_Text
   63                     
   64  00:E07A  20 FA E1          jsr     Draw_BonkBG
   65                     
   66  00:E07D  20 38 E2          jsr     Setup_Sprites
   67                     
   68                     
   69                             BG_GREEN
                                  stwz    color_reg
       00:E080  9C 02 04           stz    LOW_BYTE color_reg
       00:E083  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_000,color_data
       00:E086  A9 C0              lda    LOW_BYTE #%0000_000_111_000_000
       00:E088  8D 04 04           sta    LOW_BYTE color_data
       00:E08B  A9 01              lda    HIGH_BYTE #%0000_000_111_000_000
       00:E08D  8D 05 04           sta    HIGH_BYTE color_data
   70                             BORD_BLUE
                                  stw     #$0100,color_reg
       00:E090  A9 00              lda    LOW_BYTE #$0100
       00:E092  8D 02 04           sta    LOW_BYTE color_reg
       00:E095  A9 01              lda    HIGH_BYTE #$0100
       00:E097  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_000_111,color_data
       00:E09A  A9 07              lda    LOW_BYTE #%0000_000_000_000_111
       00:E09C  8D 04 04           sta    LOW_BYTE color_data
       00:E09F  A9 00              lda    HIGH_BYTE #%0000_000_000_000_111
       00:E0A1  8D 05 04           sta    HIGH_BYTE color_data
   71                             SCREEN_ON
       00:E0A4  03 05             st0  #5
       00:E0A6  13 CC             st1   #$CC
       00:E0A8  23 00             st2   #$00
   72                     
   73  00:E0AA            .loop                   ;Here's an infinite loop...
   74  00:E0AA  80 FE             bra     .loop
   75                     
   76                     
   77  00:E0AC            MY_VSYNC:
   78                             BORD_RED
                                  stw     #$0100,color_reg
       00:E0AC  A9 00              lda    LOW_BYTE #$0100
       00:E0AE  8D 02 04           sta    LOW_BYTE color_reg
       00:E0B1  A9 01              lda    HIGH_BYTE #$0100
       00:E0B3  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_111_000,color_data
       00:E0B6  A9 38              lda    LOW_BYTE #%0000_000_000_111_000
       00:E0B8  8D 04 04           sta    LOW_BYTE color_data
       00:E0BB  A9 00              lda    HIGH_BYTE #%0000_000_000_111_000
       00:E0BD  8D 05 04           sta    HIGH_BYTE color_data
   79  00:E0C0  48                pha
   80  00:E0C1  68                pla
   81  00:E0C2  48                pha
   82  00:E0C3  68                pla
   83                             BORD_BLUE
                                  stw     #$0100,color_reg
       00:E0C4  A9 00              lda    LOW_BYTE #$0100
       00:E0C6  8D 02 04           sta    LOW_BYTE color_reg
       00:E0C9  A9 01              lda    HIGH_BYTE #$0100
       00:E0CB  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_000_111,color_data
       00:E0CE  A9 07              lda    LOW_BYTE #%0000_000_000_000_111
       00:E0D0  8D 04 04           sta    LOW_BYTE color_data
       00:E0D3  A9 00              lda    HIGH_BYTE #%0000_000_000_000_111
       00:E0D5  8D 05 04           sta    HIGH_BYTE color_data
   84                             BG_BLACK
                                  stwz    color_reg
       00:E0D8  9C 02 04           stz    LOW_BYTE color_reg
       00:E0DB  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_000_000,color_data
       00:E0DE  A9 00              lda    LOW_BYTE #%0000_000_000_000_000
       00:E0E0  8D 04 04           sta    LOW_BYTE color_data
       00:E0E3  A9 00              lda    HIGH_BYTE #%0000_000_000_000_000
       00:E0E5  8D 05 04           sta    HIGH_BYTE color_data
   85                     
   86                             vreg    #6      ;Scanline compare register
       00:E0E8  A9 06             lda     #6
       00:E0EA  85 F7             sta     <_vreg
       00:E0EC  8D 00 00          sta     video_reg
   87                             stw     <hsync_line,video_data
       00:E0EF  A5 00              lda    LOW_BYTE <hsync_line
       00:E0F1  8D 02 00           sta    LOW_BYTE video_data
       00:E0F4  A5 01              lda    HIGH_BYTE <hsync_line
       00:E0F6  8D 03 00           sta    HIGH_BYTE video_data
   88  00:E0F9  E6 03             inc     <vb_count
   89  00:E0FB  8F 03 34          bbs0    <vb_count,.no_move
   90                     
   91                     
   92                     ;---- increase scanline position
   93  00:E0FE  FF 02 16          bbs7    <direction,.dec_line
   94                             incw    <hsync_line
       00:E101  E6 00              inc    <hsync_line              ; value at stated memory
       00:E103  D0 02              bne    .x_00044           ; location
       00:E105  E6 01              inc    <hsync_line+1
       00:E107            .x_00044:
   95                             cmpw    #BOT_LINE,<hsync_line
       00:E107  A5 01              lda    HIGH_BYTE <hsync_line
       00:E109  C9 01              cmp    HIGH_BYTE #BOT_LINE
       00:E10B  D0 04              bne    .x_00045
       00:E10D  A5 00              lda    LOW_BYTE <hsync_line
       00:E10F  C9 30              cmp    LOW_BYTE #BOT_LINE
       00:E111            .x_00045:
   96  00:E111  D0 1F             bne     .line_moved
   97  00:E113  C6 02             dec     <direction
   98  00:E115  80 1B             bra     .line_moved
   99                     ;----
  100                     ;---- decrease scanline position
  101  00:E117            .dec_line:
  102                             decw    <hsync_line
       00:E117  38                 sec                    ; value at stated memory
       00:E118  A5 00              lda    <hsync_line              ; location
       00:E11A  E9 01              sbc    #1
       00:E11C  85 00              sta    <hsync_line
       00:E11E  A5 01              lda    <hsync_line+1
       00:E120  E9 00              sbc    #0
       00:E122  85 01              sta    <hsync_line+1
  103                             cmpw    #TOP_LINE,<hsync_line
       00:E124  A5 01              lda    HIGH_BYTE <hsync_line
       00:E126  C9 00              cmp    HIGH_BYTE #TOP_LINE
       00:E128  D0 04              bne    .x_00047
       00:E12A  A5 00              lda    LOW_BYTE <hsync_line
       00:E12C  C9 40              cmp    LOW_BYTE #TOP_LINE
       00:E12E            .x_00047:
  104  00:E12E  D0 02             bne     .line_moved
  105  00:E130  E6 02             inc     <direction
  106                     ;----
  107  00:E132            .line_moved:
  108  00:E132            .no_move:
  109                     
  110                             stw     #$0057,<_di
       00:E132  A9 57              lda    LOW_BYTE #$0057
       00:E134  85 F0              sta    LOW_BYTE <_di
       00:E136  A9 00              lda    HIGH_BYTE #$0057
       00:E138  85 F1              sta    HIGH_BYTE <_di
  111  00:E13A  20 99 FE          jsr     set_write
  112  00:E13D  A5 01             lda     <hsync_line+1
  113                             ;jsr    Print_Nyb
  114  00:E13F  A5 00             lda     <hsync_line
  115                             ;jsr    Print_Byte
  116                     
  117  00:E141  60                rts
  118                     
  119                     
  120  00:E142            MY_HSYNC:
  121                             BORD_WHITE
                                  stw     #$0100,color_reg
       00:E142  A9 00              lda    LOW_BYTE #$0100
       00:E144  8D 02 04           sta    LOW_BYTE color_reg
       00:E147  A9 01              lda    HIGH_BYTE #$0100
       00:E149  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_111_111,color_data
       00:E14C  A9 FF              lda    LOW_BYTE #%0000_000_111_111_111
       00:E14E  8D 04 04           sta    LOW_BYTE color_data
       00:E151  A9 01              lda    HIGH_BYTE #%0000_000_111_111_111
       00:E153  8D 05 04           sta    HIGH_BYTE color_data
  122                             BG_CYAN
                                  stwz    color_reg
       00:E156  9C 02 04           stz    LOW_BYTE color_reg
       00:E159  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_111,color_data
       00:E15C  A9 C7              lda    LOW_BYTE #%0000_000_111_000_111
       00:E15E  8D 04 04           sta    LOW_BYTE color_data
       00:E161  A9 01              lda    HIGH_BYTE #%0000_000_111_000_111
       00:E163  8D 05 04           sta    HIGH_BYTE color_data
  123                     
  124                             vreg    #6      ;Scanline compare register
       00:E166  A9 06             lda     #6
       00:E168  85 F7             sta     <_vreg
       00:E16A  8D 00 00          sta     video_reg
  125  00:E16D  13 00             st1     #$00    ;No more Hsyncs.
  126  00:E16F  23 00             st2     #$00
  127                     
  128                             BORD_DKBLU
                                  stw     #$0100,color_reg
       00:E171  A9 00              lda    LOW_BYTE #$0100
       00:E173  8D 02 04           sta    LOW_BYTE color_reg
       00:E176  A9 01              lda    HIGH_BYTE #$0100
       00:E178  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_000_100,color_data
       00:E17B  A9 04              lda    LOW_BYTE #%0000_000_000_000_100
       00:E17D  8D 04 04           sta    LOW_BYTE color_data
       00:E180  A9 00              lda    HIGH_BYTE #%0000_000_000_000_100
       00:E182  8D 05 04           sta    HIGH_BYTE color_data
  129                             BG_GREY2
                                  stwz    color_reg
       00:E185  9C 02 04           stz    LOW_BYTE color_reg
       00:E188  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_010_010_010,color_data
       00:E18B  A9 92              lda    LOW_BYTE #%0000_000_010_010_010
       00:E18D  8D 04 04           sta    LOW_BYTE color_data
       00:E190  A9 00              lda    HIGH_BYTE #%0000_000_010_010_010
       00:E192  8D 05 04           sta    HIGH_BYTE color_data
  130                     
  131  00:E195  60                rts
  132                     
  133                     
  134                     
  135  00:E196            Intro_Text:
  136                           ;0123456789ABCDEF0123456789ABCDEF
  137  00:E196  54 48 49   .db "THIS IS OUR FIRST ON-SCREEN TEXT"
       00:E199  53 20 49  
       00:E19C  53 20 4F  
       00:E19F  55 52 20  
       00:E1A2  46 49 52  
       00:E1A5  53 54 20  
       00:E1A8  4F 4E 2D  
       00:E1AB  53 43 52  
       00:E1AE  45 45 4E  
       00:E1B1  20 54 45  
       00:E1B4  58 54     
  138  00:E1B6  53 43 41   .db "SCANLINE SPLIT NOW AT: XXX      ",0
       00:E1B9  4E 4C 49  
       00:E1BC  4E 45 20  
       00:E1BF  53 50 4C  
       00:E1C2  49 54 20  
       00:E1C5  4E 4F 57  
       00:E1C8  20 41 54  
       00:E1CB  3A 20 58  
       00:E1CE  58 58 20  
       00:E1D1  20 20 20  
       00:E1D4  20 20 00  
  139                     
  140                     
  141                     ;============================================================
  142                     ; Other includes / banks go here (for now)
  143                     
#[2]   INCLUDE\gfx_work.asm
  144                             .include "INCLUDE\gfx_work.asm"
    1                     ;
    2                     ; Graphics routines that I write will go here
    3                     ;
    4                     
    5  00:E1D7            Clear_BAT:
    6                             vreg    #$00
       00:E1D7  A9 00             lda     #$00
       00:E1D9  85 F7             sta     <_vreg
       00:E1DB  8D 00 00          sta     video_reg
    7                             stwz    video_data
       00:E1DE  9C 02 00           stz    LOW_BYTE video_data
       00:E1E1  9C 03 00           stz    HIGH_BYTE video_data
    8                             vreg    #$02
       00:E1E4  A9 02             lda     #$02
       00:E1E6  85 F7             sta     <_vreg
       00:E1E8  8D 00 00          sta     video_reg
    9                     
   10  00:E1EB  A2 00             ldx     #LOW(BATWIDTH*BATHEIGHT)
   11  00:E1ED  A0 04             ldy     #HIGH(BATWIDTH*BATHEIGHT)
   12  00:E1EF            .clrlp:
   13  00:E1EF  13 20             st1     #$20    ;"whitespace character"
   14  00:E1F1  23 01             st2     #$01
   15  00:E1F3  CA                dex
   16  00:E1F4  D0 F9             bne     .clrlp
   17  00:E1F6  88                dey
   18  00:E1F7  D0 F6             bne     .clrlp
   19  00:E1F9  60                rts
   20                     
   21                     
   22                     ;Print_Byte:    ;Prints a byte as HEX
   23                     ;       pha
   24                     ;       lsr a
   25                     ;       lsr a
   26                     ;       lsr a
   27                     ;       lsr a
   28                                     ;store char # (0-F) of high nyb
   29                     ;       ora     #LOW(HEX_VRAM/16)
   30                     ;       sta     video_data
   31                     ;       lda     #$00+(HEX_VRAM/4096) ;font pal + tile no.
   32                     ;       sta     video_data+1
   33                     ;       pla
   34                     ;Print_Nyb:
   35                     ;       pha
   36                     ;       and     #$0F    ;isolate low nyb.
   37                     ;       ora     #LOW(HEX_VRAM/16)
   38                     ;       sta     video_data
   39                     ;       lda     #$00+(HEX_VRAM/4096) ;font pal + tile no.
   40                     ;       sta     video_data+1
   41                     ;       pla
   42                     ;       rts
   43                     
   44                     ;Print_Text:                    ;_si points to zero-terminated text
   45                     ;       jsr     set_write       ;_di points to VRAM add.
   46                     ;Print_Tex2:
   47                     ;       cly
   48                     ;       ldx     #$00+(ASCII_VRAM/4096)  ;Palette 0, $1000 VRAM
   49                     ;.loop1:
   50                     ;       lda     [_si],Y
   51                     ;       beq     .finish
   52                     ;       sta     video_data
   53                     ;       stx     video_data+1
   54                     ;       incw    <_si
   55                     ;       bra     .loop1
   56                     ;.finish:
   57                     ;       rts
   58                     
   59                     
   60  00:E1FA            Draw_BonkBG:    ;draws 16x16 tile box w/ graphics on-screen
   61                             stw     #(1*$1000)+(BONKBG_VRAM/16),<_si ;Pal 1 + Tile No.
       00:E1FA  A9 00              lda    LOW_BYTE #(1*$1000)+(BONKBG_VRAM/16)
       00:E1FC  85 EE              sta    LOW_BYTE <_si
       00:E1FE  A9 11              lda    HIGH_BYTE #(1*$1000)+(BONKBG_VRAM/16)
       00:E200  85 EF              sta    HIGH_BYTE <_si
   62                             stw     #$00E8,<_di
       00:E202  A9 E8              lda    LOW_BYTE #$00E8
       00:E204  85 F0              sta    LOW_BYTE <_di
       00:E206  A9 00              lda    HIGH_BYTE #$00E8
       00:E208  85 F1              sta    HIGH_BYTE <_di
   63  00:E20A  20 99 FE          jsr     set_write       ;set VRAM address
   64                     
   65  00:E20D  A0 10             ldy     #16             ;outer loop (vert. lines)
   66  00:E20F            .bonklp0:
   67  00:E20F  A2 10             ldx     #16             ;inner loop (horiz. tiles)
   68  00:E211            .bonklp1:
   69                             stw     <_si,video_data ;lay down tile definition
       00:E211  A5 EE              lda    LOW_BYTE <_si
       00:E213  8D 02 00           sta    LOW_BYTE video_data
       00:E216  A5 EF              lda    HIGH_BYTE <_si
       00:E218  8D 03 00           sta    HIGH_BYTE video_data
   70                             incw    <_si
       00:E21B  E6 EE              inc    <_si              ; value at stated memory
       00:E21D  D0 02              bne    .x_00068           ; location
       00:E21F  E6 EF              inc    <_si+1
       00:E221            .x_00068:
   71  00:E221  CA                dex
   72  00:E222  D0 ED             bne     .bonklp1
   73                             addw    #BATWIDTH,<_di  ;then jump down to next line
                0000              .if     (2 = 3)
                                  .else
                                   ; 2-arg mode
                                   ;
       00:E224  18                 clc
       00:E225  A5 F0              lda    LOW_BYTE <_di
       00:E227  69 20              adc    LOW_BYTE #BATWIDTH
       00:E229  85 F0              sta    LOW_BYTE <_di
       00:E22B  A5 F1              lda    HIGH_BYTE <_di
       00:E22D  69 00              adc    HIGH_BYTE #BATWIDTH
       00:E22F  85 F1              sta    HIGH_BYTE <_di
                                  .endif
   74  00:E231  20 99 FE          jsr     set_write
   75  00:E234  88                dey
   76  00:E235  D0 D8             bne     .bonklp0
   77                     
   78  00:E237  60                rts
   79                     
   80                     
   81  00:E238            Setup_Sprites:
   82  00:E238  9C 00 22          stz     satb    ;zero out sprite table
   83  00:E23B  73 00 22          tii     satb,satb+1,511
       00:E23E  01 22 FF  
       00:E241  01        
   84                     
   85                             ;first "Bonk" sprite:
   86                             stw     #$00B0,satb     ;Y-pos
       00:E242  A9 B0              lda    LOW_BYTE #$00B0
       00:E244  8D 00 22           sta    LOW_BYTE satb
       00:E247  A9 00              lda    HIGH_BYTE #$00B0
       00:E249  8D 01 22           sta    HIGH_BYTE satb
   87                             stw     #$0070,satb+2   ;X-pos
       00:E24C  A9 70              lda    LOW_BYTE #$0070
       00:E24E  8D 02 22           sta    LOW_BYTE satb+2
       00:E251  A9 00              lda    HIGH_BYTE #$0070
       00:E253  8D 03 22           sta    HIGH_BYTE satb+2
   88                             stw     #(BONKSP_VRAM/32),satb+4 ;Tile No.
       00:E256  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E258  8D 04 22           sta    LOW_BYTE satb+4
       00:E25B  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E25D  8D 05 22           sta    HIGH_BYTE satb+4
   89                             stw     #%0_0_01_1_00_1_1_000_0000,satb+6 ;Attributes
       00:E260  A9 80              lda    LOW_BYTE #%0_0_01_1_00_1_1_000_0000
       00:E262  8D 06 22           sta    LOW_BYTE satb+6
       00:E265  A9 19              lda    HIGH_BYTE #%0_0_01_1_00_1_1_000_0000
       00:E267  8D 07 22           sta    HIGH_BYTE satb+6
   90                     
   91                             ;2nd "Chikkun" sprite:
   92                             stw     #$00B0,satb+8   ;Y-pos
       00:E26A  A9 B0              lda    LOW_BYTE #$00B0
       00:E26C  8D 08 22           sta    LOW_BYTE satb+8
       00:E26F  A9 00              lda    HIGH_BYTE #$00B0
       00:E271  8D 09 22           sta    HIGH_BYTE satb+8
   93                             stw     #$0090,satb+2+8 ;X-pos
       00:E274  A9 90              lda    LOW_BYTE #$0090
       00:E276  8D 0A 22           sta    LOW_BYTE satb+2+8
       00:E279  A9 00              lda    HIGH_BYTE #$0090
       00:E27B  8D 0B 22           sta    HIGH_BYTE satb+2+8
   94                             stw     #(BONKSP_VRAM/32)+8,satb+4+8 ;Tile No.
       00:E27E  A9 88              lda    LOW_BYTE #(BONKSP_VRAM/32)+8
       00:E280  8D 0C 22           sta    LOW_BYTE satb+4+8
       00:E283  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)+8
       00:E285  8D 0D 22           sta    HIGH_BYTE satb+4+8
   95                             stw     #%0_0_01_0_00_1_1_000_0000,satb+6+8 ;Attributes
       00:E288  A9 80              lda    LOW_BYTE #%0_0_01_0_00_1_1_000_0000
       00:E28A  8D 0E 22           sta    LOW_BYTE satb+6+8
       00:E28D  A9 11              lda    HIGH_BYTE #%0_0_01_0_00_1_1_000_0000
       00:E28F  8D 0F 22           sta    HIGH_BYTE satb+6+8
   96                     ;    low BG<->SPR priority here ^
   97                     
   98  00:E292  44 01             bsr     Update_SATB_BLOCKTRANSFER
   99                     
  100                     
  101  00:E294  60                rts
  102                     
  103  00:E295            Update_SATB_BLOCKTRANSFER:      ;SATB to VRAM (fast)
  104                             stw     #SATB_VRAM,<_di ;default SATB location
       00:E295  A9 00              lda    LOW_BYTE #SATB_VRAM
       00:E297  85 F0              sta    LOW_BYTE <_di
       00:E299  A9 0F              lda    HIGH_BYTE #SATB_VRAM
       00:E29B  85 F1              sta    HIGH_BYTE <_di
  105  00:E29D  20 99 FE          jsr     set_write
  106  00:E2A0  E3 00 22          tia     satb,$0002,$0200 ;Blast SATB to VRAM
       00:E2A3  02 00 00  
       00:E2A6  02        
  107                     
  108  00:E2A7  60                rts
#[1]   tutorial.asm
  145                     
  146                     ;============================================================
  147                     ;============================================================
  148                     
  149           0002              .bank $2
  150           4000              .org $4000
  151  02:4000            MyFont: .incchr "INCLUDE\parofont.pcx"
  152  02:5000            SprCHR: ;.incspr "INCLUDE\bonkSP.pcx"
  153  02:5000                    .incspr "INCLUDE\bonkSP.pcx",0,0,2,2    ;Bonk 32x32
  154  02:5200                    .incspr "INCLUDE\bonkSP.pcx",32,0,2,2   ;Chik 32x32
  155                     
  156  02:5400            FontPal: .incpal "INCLUDE\parofont.pcx",0,1
  157  02:5420            BonkPal: .incpal "INCLUDE\bonkBG.pcx",0,1
  158  02:5440            SPRPal:  .incpal "INCLUDE\bonkSP.pcx",0,1
  159                     
  160           0003              .bank $3
  161           4000              .org $4000
  162  03:4000            BonkBG: .incchr "INCLUDE\bonkBG.pcx"

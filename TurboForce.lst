#[1]   TurboForce.asm
   11                     ;--------------- END INCLUDES ------------------
   12                     
   13           0040      TOP_LINE        = $0040
   14           0130      BOT_LINE        = $0130
   15                     
   16           1000      BONKBG_VRAM              = $1000
   17           3000      BONKSP_VRAM              = $3000
   18                     
   19           0F00      SATB_VRAM       = $0F00 ;where to put the Sprite Table in VRAM
   20                     
   21           0020      BATWIDTH        = 32    ;Set to 32, 64, or 128
   22           0020      BATHEIGHT       = 32    ;Set to 32 or 64.
   23                     
   24                     ; Zero-page variables
   25           2000              .zp
   26  --:2000            hsync_line:             .ds 2
   27  --:2002            direction:              .ds 1
   28  --:2003            vb_count:               .ds 1 ;$03
   29  --:2004            frame_index             .ds 1 ;$04
   30  --:2005            army_type               .ds 1
   31  --:2006            army_1_count    .ds 1
   32  --:2007            opp_army_type   .ds 1
   33  --:2008            army_2_count    .ds 1
   34  --:2009            unit_x                  .ds 1
   35  --:200A            unit_y                  .ds 1
   36  --:200B            opp_unit_x              .ds 1
   37  --:200C            opp_unit_y              .ds 1
   38  --:200D            opp_diff                .ds 2
   39  --:200F            opp                             .ds 1
   40  --:2010            current_army    .ds 2
   41  --:2012            current_opp             .ds 2
   42  --:2014            opp_pointer             .ds 1
   43  --:2015            army_count              .ds 1
   44  --:2016            opp_army_count  .ds 1
   45  --:2017            frame_state             .ds 1
   46  --:2018            PRN0                    .ds 1
   47  --:2019            PRN1                    .ds 1
   48  --:201A            PRN2                    .ds 1
   49  --:201B            PRN3                    .ds 1
   50  --:201C            move_state              .ds 1
   51  --:201D            general_1               .ds 1
   52  --:201E            general_2               .ds 1
   53                     
   54                     ;Higher RAM variables
   55           2200              .bss
   56  --:2200            satb:            .ds 512        ;Sprite Attribute Table Buffer
   57           2200      army_one_offset         = $2200
   58           2208      army_two_offset         = $2208
   59                     
   60                     ;==============================
   61           0000              .code
   62           0000              .bank   $0
   63           E000              .org    $E000
   64                     
   65                     
   66  00:E000            MAIN:
   67                             INTS_OFF                ;DISABLE INTERRUPTS!
       00:E000  03 05             st0  #5
       00:E002  13 00             st1   #$00
       00:E004  23 00             st2   #$00
   68  00:E006  64 02             stz     <direction
   69                             stw     #$0040,<hsync_line
       00:E008  A9 40              lda    LOW_BYTE #$0040
       00:E00A  85 00              sta    LOW_BYTE <hsync_line
       00:E00C  A9 00              lda    HIGH_BYTE #$0040
       00:E00E  85 01              sta    HIGH_BYTE <hsync_line
   70                     
   71                             map bg1
       00:E010  A9 03              lda   #bank(bg1)        ; addressable memory
       00:E012  53 04              tam   #page(bg1)
   72                             vload BONKBG_VRAM, bg1, #$800
                0001              .if (3 = 3)
                                   stw   #BONKBG_VRAM,<_di
       00:E014  A9 00              lda    LOW_BYTE #BONKBG_VRAM
       00:E016  85 F0              sta    LOW_BYTE <_di
       00:E018  A9 10              lda    HIGH_BYTE #BONKBG_VRAM
       00:E01A  85 F1              sta    HIGH_BYTE <_di
                                   stw   #bg1,<_si
       00:E01C  A9 00              lda    LOW_BYTE #bg1
       00:E01E  85 EE              sta    LOW_BYTE <_si
       00:E020  A9 40              lda    HIGH_BYTE #bg1
       00:E022  85 EF              sta    HIGH_BYTE <_si
                                   stw   ##$800,<_cx     ;WTF is this??? ERRORS!!! "stw   #$800,<_cx"
       00:E024  A9 00              lda    LOW_BYTE ##$800
       00:E026  85 FC              sta    LOW_BYTE <_cx
       00:E028  A9 08              lda    HIGH_BYTE ##$800
       00:E02A  85 FD              sta    HIGH_BYTE <_cx
                                  .else
                                  .endif
       00:E02C  20 58 FE           jsr   load_vram
   73                     
   74                             map bg2
       00:E02F  A9 04              lda   #bank(bg2)        ; addressable memory
       00:E031  53 04              tam   #page(bg2)
   75                             vload $1800, bg2, #$800
                0001              .if (3 = 3)
                                   stw   #$1800,<_di
       00:E033  A9 00              lda    LOW_BYTE #$1800
       00:E035  85 F0              sta    LOW_BYTE <_di
       00:E037  A9 18              lda    HIGH_BYTE #$1800
       00:E039  85 F1              sta    HIGH_BYTE <_di
                                   stw   #bg2,<_si
       00:E03B  A9 00              lda    LOW_BYTE #bg2
       00:E03D  85 EE              sta    LOW_BYTE <_si
       00:E03F  A9 40              lda    HIGH_BYTE #bg2
       00:E041  85 EF              sta    HIGH_BYTE <_si
                                   stw   ##$800,<_cx     ;WTF is this??? ERRORS!!! "stw   #$800,<_cx"
       00:E043  A9 00              lda    LOW_BYTE ##$800
       00:E045  85 FC              sta    LOW_BYTE <_cx
       00:E047  A9 08              lda    HIGH_BYTE ##$800
       00:E049  85 FD              sta    HIGH_BYTE <_cx
                                  .else
                                  .endif
       00:E04B  20 58 FE           jsr   load_vram
   76                     
   77                             map     bg3
       00:E04E  A9 05              lda   #bank(bg3)        ; addressable memory
       00:E050  53 04              tam   #page(bg3)
   78                             vload $2000, bg3, #$800
                0001              .if (3 = 3)
                                   stw   #$2000,<_di
       00:E052  A9 00              lda    LOW_BYTE #$2000
       00:E054  85 F0              sta    LOW_BYTE <_di
       00:E056  A9 20              lda    HIGH_BYTE #$2000
       00:E058  85 F1              sta    HIGH_BYTE <_di
                                   stw   #bg3,<_si
       00:E05A  A9 00              lda    LOW_BYTE #bg3
       00:E05C  85 EE              sta    LOW_BYTE <_si
       00:E05E  A9 40              lda    HIGH_BYTE #bg3
       00:E060  85 EF              sta    HIGH_BYTE <_si
                                   stw   ##$800,<_cx     ;WTF is this??? ERRORS!!! "stw   #$800,<_cx"
       00:E062  A9 00              lda    LOW_BYTE ##$800
       00:E064  85 FC              sta    LOW_BYTE <_cx
       00:E066  A9 08              lda    HIGH_BYTE ##$800
       00:E068  85 FD              sta    HIGH_BYTE <_cx
                                  .else
                                  .endif
       00:E06A  20 58 FE           jsr   load_vram
   79                     
   80                     
   81                             map BonkPal
       00:E06D  A9 0A              lda   #bank(BonkPal)        ; addressable memory
       00:E06F  53 40              tam   #page(BonkPal)
   82                             map SPRPal
       00:E071  A9 0A              lda   #bank(SPRPal)        ; addressable memory
       00:E073  53 40              tam   #page(SPRPal)
   83                             ;map SprCHR
   84                             ;vload  BONKSP_VRAM, SprCHR, $0C00      ;Load 2 32x32 sprites
   85                     
   86                             set_bgpal #1, BonkPal, #1
       00:E075  A9 01              lda   #1
       00:E077  85 F8              sta   <_al
                                   stw   #BonkPal,<_si
       00:E079  A9 00              lda    LOW_BYTE #BonkPal
       00:E07B  85 EE              sta    LOW_BYTE <_si
       00:E07D  A9 C0              lda    HIGH_BYTE #BonkPal
       00:E07F  85 EF              sta    HIGH_BYTE <_si
                0002              .if 2
       00:E081  A9 01              lda   #1
                                  .else
                                  .endif
       00:E083  85 FC              sta   <_cl
       00:E085  20 00 FE           jsr   set_palette
   87                             set_sprpal #0, SPRPal, #1
       00:E088  A9 00              lda   #0
                                   add   #16
                0000              .if (1 = 2)            ; register A (handle carry
                                  .else
       00:E08A  18                 clc
       00:E08B  69 10              adc    #16
                                  .endif
       00:E08D  85 F8              sta   <_al
                                   stw   #SPRPal,<_si
       00:E08F  A9 60              lda    LOW_BYTE #SPRPal
       00:E091  85 EE              sta    LOW_BYTE <_si
       00:E093  A9 D9              lda    HIGH_BYTE #SPRPal
       00:E095  85 EF              sta    HIGH_BYTE <_si
                0002              .if 2
       00:E097  A9 01              lda   #1
                                  .else
                                  .endif
       00:E099  85 FC              sta   <_cl
       00:E09B  20 00 FE           jsr   set_palette
   88                             set_sprpal #1, SPRPAlt, #2
       00:E09E  A9 01              lda   #1
                                   add   #16
                0000              .if (1 = 2)            ; register A (handle carry
                                  .else
       00:E0A0  18                 clc
       00:E0A1  69 10              adc    #16
                                  .endif
       00:E0A3  85 F8              sta   <_al
                                   stw   #SPRPAlt,<_si
       00:E0A5  A9 60              lda    LOW_BYTE #SPRPAlt
       00:E0A7  85 EE              sta    LOW_BYTE <_si
       00:E0A9  A9 DB              lda    HIGH_BYTE #SPRPAlt
       00:E0AB  85 EF              sta    HIGH_BYTE <_si
                0002              .if 2
       00:E0AD  A9 02              lda   #2
                                  .else
                                  .endif
       00:E0AF  85 FC              sta   <_cl
       00:E0B1  20 00 FE           jsr   set_palette
   89                     
   90                             map BGMap
       00:E0B4  A9 02              lda   #bank(BGMap)        ; addressable memory
       00:E0B6  53 04              tam   #page(BGMap)
   91                             ;jsr    Clear_BAT
   92                             ;jsr    Draw_BonkBG  ;E1B0 I think?
   93                             batcpy $0000,#32,BGMap,#32,#32
                                   stw   #$0000,<_di
       00:E0B8  A9 00              lda    LOW_BYTE #$0000
       00:E0BA  85 F0              sta    LOW_BYTE <_di
       00:E0BC  A9 00              lda    HIGH_BYTE #$0000
       00:E0BE  85 F1              sta    HIGH_BYTE <_di
                                   stw    #32,<_dx
       00:E0C0  A9 20              lda    LOW_BYTE #32
       00:E0C2  85 FE              sta    LOW_BYTE <_dx
       00:E0C4  A9 00              lda    HIGH_BYTE #32
       00:E0C6  85 FF              sta    HIGH_BYTE <_dx
                                   stw   #BGMap,<_si
       00:E0C8  A9 00              lda    LOW_BYTE #BGMap
       00:E0CA  85 EE              sta    LOW_BYTE <_si
       00:E0CC  A9 40              lda    HIGH_BYTE #BGMap
       00:E0CE  85 EF              sta    HIGH_BYTE <_si
       00:E0D0  A9 20              lda   #32
       00:E0D2  85 FC              sta   <_cl
       00:E0D4  A9 20              lda   #32
       00:E0D6  85 FD              sta   <_ch
       00:E0D8  20 2D FE           jsr   load_bat
   94  00:E0DB  20 6C E4          jsr     Setup_Sprites
   95                     
   96  00:E0DE  A9 01             lda #$01
   97  00:E0E0  85 04             sta <frame_index
   98                     
   99                             BG_CYAN
                                  stwz    color_reg
       00:E0E2  9C 02 04           stz    LOW_BYTE color_reg
       00:E0E5  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_111,color_data
       00:E0E8  A9 C7              lda    LOW_BYTE #%0000_000_111_000_111
       00:E0EA  8D 04 04           sta    LOW_BYTE color_data
       00:E0ED  A9 01              lda    HIGH_BYTE #%0000_000_111_000_111
       00:E0EF  8D 05 04           sta    HIGH_BYTE color_data
  100                             SCREEN_ON
       00:E0F2  03 05             st0  #5
       00:E0F4  13 CC             st1   #$CC
       00:E0F6  23 00             st2   #$00
  101  00:E0F8  A9 0A             lda #$0A
  102  00:E0FA  85 05             sta <army_type ;army 1 type 
  103  00:E0FC  85 06             sta <army_1_count ;army 1 count
  104  00:E0FE  A9 0A             lda #$0A
  105  00:E100  85 07             sta <opp_army_type ;army 2 type
  106  00:E102  85 08             sta <army_2_count ;army 2 count
  107                     
  108  00:E104            .loop                   ;Here's an infinite loop...
  109  00:E104  3F 03 FD          bbr3 <vb_count, .loop;ANIMATION
  110  00:E107  20 0C E1          jsr BATTLE_LOOP
  111  00:E10A  80 F8             bra     .loop
  112                     
#[2]   INCLUDE\character.asm
  113                             .include "INCLUDE\character.asm";,20,8
    1                     ;------------------------------
    2                     ;       Character logic flow
    3                     ;------------------------------
    4                     ;
    5                     ; logic
    6                     ; BBS0 -> death
    7                     ; BBS1 -> attack 
    8                     ; BBS2 -> move
    9                     ;------------------------------
   10                     
   11  00:E10C            BATTLE_LOOP:
   12  00:E10C  78            sei
   13  00:E10D  64 03             stz <vb_count
   14                     
   15  00:E10F  A9 10         lda #$10
   16  00:E111  8D 12 20      sta $2012
   17                     
   18  00:E114  A9 08         lda #$08
   19  00:E116  8D 0F 20      sta opp
   20                     
   21  00:E119  A5 06         lda <army_1_count
   22  00:E11B  85 15         sta <army_count
   23                     
   24  00:E11D  A5 08         lda <army_2_count
   25  00:E11F  85 16         sta <opp_army_count
   26                     
   27                         stw #$2200, <current_army
       00:E121  A9 00              lda    LOW_BYTE #$2200
       00:E123  85 10              sta    LOW_BYTE <current_army
       00:E125  A9 22              lda    HIGH_BYTE #$2200
       00:E127  85 11              sta    HIGH_BYTE <current_army
   28  00:E129  A6 15         ldx <army_count 
   29                     
   30  00:E12B  20 55 E1      jsr BATTLE
   31                     
   32  00:E12E  A5 15         lda <army_count
   33  00:E130  85 06         sta <army_1_count
   34                     
   35  00:E132  A9 00         lda #$00
   36  00:E134  8D 0F 20      sta opp
   37                     
   38  00:E137  A5 08         lda <army_2_count
   39  00:E139  85 15         sta <army_count
   40                     
   41  00:E13B  A5 06         lda <army_1_count
   42  00:E13D  85 16         sta <opp_army_count
   43                     
   44                         stw #$2208, <current_army
       00:E13F  A9 08              lda    LOW_BYTE #$2208
       00:E141  85 10              sta    LOW_BYTE <current_army
       00:E143  A9 22              lda    HIGH_BYTE #$2208
       00:E145  85 11              sta    HIGH_BYTE <current_army
   45  00:E147  A6 15         ldx <army_count
   46                     
   47  00:E149  20 55 E1      jsr BATTLE
   48                     
   49  00:E14C  A5 15         lda <army_count
   50  00:E14E  85 08         sta <army_2_count
   51  00:E150  20 99 E7      jsr Update_SATB_BLOCKTRANSFER
   52  00:E153  58            cli
   53  00:E154  60            rts
   54                     
   55  00:E155            BATTLE:
   56  00:E155            .next:
   57  00:E155  F0 6F         BEQ .end_army ;if zero
   58  00:E157  DA            PHX
   59  00:E158  C2            CLY
   60  00:E159  B1 10         LDA [$10], Y
   61  00:E15B  F0 44         BEQ .skip_unit
   62  00:E15D  20 C3 E3      JSR GET_FRAME
   63                         ;BBR2 <frame_state, .cont
   64  00:E160  20 E5 E3      JSR GET_STATE
   65  00:E163  29 10         AND #$10
   66  00:E165  D0 05         BNE .cont_char
   67  00:E167  20 C7 E1      JSR DEATH
   68  00:E16A  80 47         BRA .skip_update_position
   69  00:E16C            .cont_char:
   70  00:E16C  A0 06         LDY #$06
   71  00:E16E  B1 10         LDA [$10], Y
   72  00:E170  29 20         AND #%00100000
   73  00:E172  F0 06         BEQ .store_moving
   74  00:E174  A9 A0         LDA #$A0
   75  00:E176  85 1C         STA <move_state
   76  00:E178  80 04         BRA .store_attack
   77  00:E17A            .store_moving
   78  00:E17A  A9 80         LDA #$80
   79  00:E17C  85 1C         STA <move_state
   80  00:E17E            .store_attack
   81  00:E17E  C2            CLY
   82  00:E17F  B1 10         lda [$10], Y
   83  00:E181  85 0A         sta <unit_y
   84  00:E183  C8            iny
   85  00:E184  C8            iny
   86  00:E185  B1 10         lda [$10],Y
   87  00:E187  85 09         sta <unit_x
   88                     
   89  00:E189  20 5C E2      JSR ANIMATION
   90  00:E18C  20 34 E3      JSR VERIFY_MOVE
   91                     
   92  00:E18F  C2            CLY
   93  00:E190  AD FF 20      lda $20FF
   94  00:E193  D0 1E         BNE .skip_update_position
   95                         ;BRANCH IF CAN'T MOVE .SKIP_UPDATE_POS
   96  00:E195  A5 0A         lda <unit_y
   97  00:E197  91 10         sta [$10],Y
   98  00:E199  C8            iny
   99  00:E19A  C8            iny
  100  00:E19B  A5 09         lda <unit_x
  101  00:E19D  91 10         sta [$10],Y
  102  00:E19F  80 12         BRA .skip_update_position
  103                     
  104  00:E1A1            .skip_unit
  105                         addw $2012,<current_army
                0000              .if     (2 = 3)
                                  .else
                                   ; 2-arg mode
                                   ;
       00:E1A1  18                 clc
       00:E1A2  A5 10              lda    LOW_BYTE <current_army
       00:E1A4  6D 12 20           adc    LOW_BYTE $2012
       00:E1A7  85 10              sta    LOW_BYTE <current_army
       00:E1A9  A5 11              lda    HIGH_BYTE <current_army
       00:E1AB  6D 13 20           adc    HIGH_BYTE $2012
       00:E1AE  85 11              sta    HIGH_BYTE <current_army
                                  .endif
  106  00:E1B0  FA            PLX
  107  00:E1B1  80 A2         BRA .next
  108                     
  109  00:E1B3            .skip_update_position
  110                         addw $2012,<current_army
                0000              .if     (2 = 3)
                                  .else
                                   ; 2-arg mode
                                   ;
       00:E1B3  18                 clc
       00:E1B4  A5 10              lda    LOW_BYTE <current_army
       00:E1B6  6D 12 20           adc    LOW_BYTE $2012
       00:E1B9  85 10              sta    LOW_BYTE <current_army
       00:E1BB  A5 11              lda    HIGH_BYTE <current_army
       00:E1BD  6D 13 20           adc    HIGH_BYTE $2012
       00:E1C0  85 11              sta    HIGH_BYTE <current_army
                                  .endif
  111  00:E1C2  FA            PLX
  112  00:E1C3  CA            DEX
  113  00:E1C4  80 8F         BRA .next
  114                     
  115  00:E1C6            .end_army:
  116  00:E1C6  60            rts
  117                     
  118                     ;*--------------------------------*
  119                     ;|       CHARACTER FUNCTIONS      |
  120                     ;*--------------------------------*
  121                     
  122  00:E1C7            DEATH:
  123  00:E1C7  C2            CLY
  124  00:E1C8  A9 C0         LDA #$C0
  125  00:E1CA  85 1C         STA <move_state
  126  00:E1CC  20 75 E2      JSR ANIMATE
  127                     
  128  00:E1CF  2F 17 1B      BBR2 <frame_state, .dont_kill_yet
  129  00:E1D2  A9 00         LDA #$00
  130  00:E1D4  91 10         STA [$10], Y
  131  00:E1D6  C8            INY
  132  00:E1D7  91 10         STA [$10], Y
  133  00:E1D9  C8            INY
  134  00:E1DA  91 10         STA [$10], Y
  135  00:E1DC  C8            INY
  136  00:E1DD  91 10         STA [$10], Y
  137  00:E1DF  C8            INY
  138  00:E1E0  91 10         STA [$10], Y
  139  00:E1E2  C8            INY
  140  00:E1E3  91 10         STA [$10], Y
  141  00:E1E5  C8            INY
  142  00:E1E6  91 10         STA [$10], Y
  143  00:E1E8  C8            INY
  144  00:E1E9  91 10         STA [$10], Y
  145  00:E1EB  C6 15         DEC <army_count
  146  00:E1ED            .dont_kill_yet
  147  00:E1ED  60            rts
  148                     
  149  00:E1EE            FIND_Y_DIRECTION:
  150  00:E1EE  A5 0A         lda <unit_y
  151  00:E1F0  38            SEC 
  152  00:E1F1  5A            phy
  153  00:E1F2  A4 14         ldy <opp_pointer
  154  00:E1F4  F9 00 22      sbc $2200,Y;$2208
  155  00:E1F7  7A            ply
  156  00:E1F8  B0 05         BCS .inc_y
  157                     
  158  00:E1FA  E6 0A         inc <unit_y
  159  00:E1FC  E6 0A         inc <unit_y
  160  00:E1FE  60            rts
  161  00:E1FF            .inc_y
  162  00:E1FF  C6 0A         dec <unit_y
  163  00:E201  C6 0A         dec <unit_y
  164  00:E203  60            rts
  165                     
  166  00:E204            FIND_X_DIRECTION:
  167  00:E204  A5 09         lda <unit_x
  168  00:E206  38            SEC
  169  00:E207  5A            phy
  170  00:E208  A4 14         ldy <opp_pointer
  171  00:E20A  C8            iny
  172  00:E20B  C8            iny
  173  00:E20C  F9 00 22      sbc $2200,Y;<opp_unit_x;$220A
  174  00:E20F  7A            ply
  175  00:E210  B0 0D         BCS .inc_x
  176                     
  177  00:E212  E6 09         inc <unit_x
  178  00:E214  E6 09         inc <unit_x
  179                     
  180  00:E216  A0 07         ldy #$07
  181  00:E218  B1 10         lda [$10], Y
  182  00:E21A  09 08         ORA #$08
  183  00:E21C  91 10         sta [$10], Y
  184                     
  185  00:E21E  60            rts
  186  00:E21F            .inc_x
  187  00:E21F  C6 09         dec <unit_x
  188  00:E221  C6 09         dec <unit_x
  189                     
  190  00:E223  A0 07         ldy #$07
  191  00:E225  B1 10         lda [$10], Y
  192  00:E227  29 F7         AND #$F7
  193  00:E229  91 10         sta [$10], Y
  194                     
  195  00:E22B  60            rts
  196                     
  197  00:E22C            MOVE:
  198  00:E22C  48            pha
  199  00:E22D  A5 0C         lda <opp_unit_y
  200  00:E22F  F0 02         BEQ .change_x
  201                     
  202  00:E231  44 BB         BSR FIND_Y_DIRECTION
  203                     
  204  00:E233            .change_x
  205  00:E233  38            SEC
  206  00:E234  A9 20         lda #$20
  207  00:E236  E5 0B         sbc <opp_unit_x
  208  00:E238  B0 06         BCS .too_close
  209  00:E23A  F0 1E         BEQ .end_move
  210                         
  211  00:E23C  44 C6         BSR FIND_X_DIRECTION
  212  00:E23E  68            pla
  213  00:E23F  60            rts
  214                     
  215  00:E240            .too_close
  216  00:E240  A5 09         lda <unit_x
  217  00:E242  38            SEC
  218  00:E243  5A            phy
  219  00:E244  A4 14         ldy <opp_pointer
  220  00:E246  C8            iny
  221  00:E247  C8            iny
  222  00:E248  F9 00 22      sbc $2200,Y;<opp_unit_x;$220A
  223  00:E24B  7A            ply
  224  00:E24C  90 06         BCC ._inc_x
  225                     
  226  00:E24E  E6 09         inc <unit_x
  227  00:E250  E6 09         inc <unit_x
  228  00:E252  68            pla
  229  00:E253  60            rts
  230  00:E254            ._inc_x
  231  00:E254  C6 09         dec <unit_x
  232  00:E256  C6 09         dec <unit_x
  233  00:E258  68            pla
  234  00:E259  60            rts
  235                     
  236  00:E25A            .end_move
  237  00:E25A  68            pla
  238  00:E25B  60            rts
  239                     
  240  00:E25C            ANIMATION:
  241                         ;
  242  00:E25C  A9 FF         lda #$FF
  243  00:E25E  85 0B         sta <opp_unit_x
  244  00:E260  85 0C         sta <opp_unit_y
  245  00:E262  85 0D         sta <opp_diff
  246  00:E264  A9 01         lda #$01
  247  00:E266  85 0E         sta <opp_diff+1
  248                         ;
  249  00:E268  AD 00 0C      LDA $0C00
  250  00:E26B  38            SEC
  251  00:E26C  65 18         ADC <PRN0
  252  00:E26E  85 18         STA <PRN0
  253  00:E270  20 8B E2          jsr CHECK_ATTACK
  254  00:E273  F0 00             BEQ .change_frame
  255                     
  256  00:E275            .MOVEMENT:
  257                         ;jsr MOVE    
  258                     
  259  00:E275            .change_frame:
  260  00:E275            ANIMATE
  261  00:E275  5A            phy
  262  00:E276  A0 04         ldy #$04
  263  00:E278  B1 10         lda [$10], Y
  264  00:E27A  18            CLC
  265  00:E27B  69 08         ADC #$08
  266  00:E27D  38            SEC
  267  00:E27E            .mod:
  268  00:E27E  E9 20             SBC #$20        
  269  00:E280  B0 FC             BCS .mod
  270  00:E282            .step_frame:
  271  00:E282  69 20             ADC #$20    
  272  00:E284  18                CLC
  273                     
  274  00:E285  65 1C         ADC <move_state
  275                             ;ADC #$80
  276  00:E287  91 10         sta [$10],Y
  277  00:E289  7A            ply
  278  00:E28A  60                rts
  279                     
  280  00:E28B            CHECK_ATTACK: ;if able to attack, don't move unit until other unit has died
  281                     
  282  00:E28B  20 AC E2      JSR FIND_NEAREST_OPP        
  283  00:E28E  A5 0C         lda <opp_unit_y
  284  00:E290  D0 0C         BNE .end_check
  285                     
  286  00:E292  38            SEC
  287  00:E293  A5 0B         lda <opp_unit_x
  288  00:E295  E9 20         sbc #$20
  289  00:E297  D0 05         BNE .end_check
  290                     
  291  00:E299  20 92 E3      JSR ATTACK
  292                     
  293  00:E29C  80 01             BRA .swap_animations
  294  00:E29E            .end_check
  295  00:E29E  60                rts
  296                     
  297  00:E29F            .swap_animations:
  298                             ;vload  BONKSP_VRAM, SprAttack, $0400
  299  00:E29F  A9 A0         LDA #$A0
  300  00:E2A1  85 1C         STA <move_state
  301  00:E2A3  A0 06         LDY #$06
  302  00:E2A5  B1 10         LDA [$10], Y
  303  00:E2A7  09 20         ORA #%00100000
  304  00:E2A9  A9 00         LDA #$00
  305  00:E2AB  60                rts
  306                     
  307  00:E2AC            FIND_NEAREST_OPP:
  308  00:E2AC  DA            phx
  309  00:E2AD  5A            phy
  310                     
  311  00:E2AE  AD 0F 20      lda opp
  312  00:E2B1  A8            TAY
  313  00:E2B2  A6 16         ldx <opp_army_count
  314                     
  315  00:E2B4            .nearest_loop
  316  00:E2B4  F0 7B         BEQ .end_nearest_loop
  317  00:E2B6  B9 00 22      LDA $2200, Y
  318  00:E2B9  D0 05         BNE .cont_nearest
  319  00:E2BB  E8            INX
  320  00:E2BC  C8            INY
  321  00:E2BD  C8            INY
  322  00:E2BE  80 69         BRA .next
  323                     
  324  00:E2C0            .cont_nearest:
  325  00:E2C0  A5 0A         lda <unit_y ;current unit y
  326  00:E2C2  38            SEC
  327  00:E2C3  F9 00 22      SBC $2200,Y ;n unit's Y
  328  00:E2C6  B0 04         BCS .store_y
  329  00:E2C8  49 FF         EOR #$FF
  330  00:E2CA  69 01         ADC #$01
  331  00:E2CC            .store_y
  332  00:E2CC  8D FF 20      sta $20FF ;store y
  333                     
  334  00:E2CF  C8            iny
  335  00:E2D0  C8            iny
  336  00:E2D1  18            clc
  337  00:E2D2  A5 09         lda <unit_x ;current unit x
  338  00:E2D4  38            SEC
  339  00:E2D5  F9 00 22      sbc $2200,Y ;n unit's x
  340  00:E2D8  B0 04         BCS .store_x
  341  00:E2DA  49 FF         EOR #$FF
  342  00:E2DC  69 01         ADC #$01
  343  00:E2DE            .store_x    
  344  00:E2DE  8D FE 20      sta $20FE ;store x
  345                         
  346  00:E2E1  18            CLC
  347  00:E2E2  AD FF 20      lda $20FF ;y
  348  00:E2E5  6D FE 20      adc $20FE ;x
  349  00:E2E8  8D FC 20      sta $20FC ;store diff
  350  00:E2EB  9C FD 20      stz $20FD
  351  00:E2EE  2E FD 20      ROL $20FD
  352                             
  353                         sbws $20FC, <opp_diff, $20FA;<opp_diff, $20FC, $20FA
       00:E2F1  38                sec
       00:E2F2  A5 0D             lda     LOW_BYTE <opp_diff
       00:E2F4  ED FC 20          sbc     LOW_BYTE $20FC
       00:E2F7  8D FA 20          sta     LOW_BYTE $20FA
       00:E2FA  A5 0E             lda     HIGH_BYTE <opp_diff
       00:E2FC  ED FD 20          sbc     HIGH_BYTE $20FC
       00:E2FF  8D FB 20          sta     HIGH_BYTE $20FA
  354  00:E302  90 25         BCC .next
  355                     
  356                         ;have a new closest opponent
  357  00:E304  5A            phy
  358  00:E305  88            dey
  359  00:E306  88            dey
  360  00:E307  84 14         sty <opp_pointer
  361  00:E309  7A            ply
  362  00:E30A  AD FF 20      lda $20FF
  363  00:E30D  85 0C         sta <opp_unit_y ;difference
  364  00:E30F  AD FE 20      lda $20FE
  365  00:E312  85 0B         sta <opp_unit_x ;difference
  366  00:E314  AD FC 20      lda $20FC
  367  00:E317  85 0D         sta <opp_diff
  368  00:E319  AD FD 20      lda $20FD
  369  00:E31C  85 0E         sta <opp_diff+1
  370                     
  371                         ;if he's in attacking range, go ahead and and exit. We don't care if there are other people closer
  372  00:E31E  A5 0C         lda <opp_unit_y
  373  00:E320  D0 07         BNE .next
  374  00:E322  A5 0B         lda <opp_unit_x
  375  00:E324  38            SEC
  376  00:E325  E9 20         SBC #$20 ;CHANGE HERE
  377  00:E327  F0 08         BEQ .end_nearest_loop
  378                     
  379  00:E329            .next:
  380  00:E329  98            TYA 
  381  00:E32A  18            clc
  382  00:E32B  69 0E         adc #$0E
  383  00:E32D  A8            TAY
  384  00:E32E  CA            DEX
  385  00:E32F  80 83         BRA .nearest_loop
  386                     
  387  00:E331            .end_nearest_loop
  388  00:E331  7A            ply
  389  00:E332  FA            plx
  390  00:E333  60            rts
  391                     
  392  00:E334            VERIFY_MOVE
  393  00:E334  DA            phx
  394  00:E335  5A            phy
  395  00:E336  C2            cly
  396                         
  397  00:E337  AD 0F 20      lda opp ;load the current opponent offset and then XOR it with 8 to get our armies offset 
  398  00:E33A  49 08         EOR #$08
  399  00:E33C  A8            TAY
  400  00:E33D  A6 15         ldx <army_count
  401                     
  402  00:E33F            .verify_loop
  403  00:E33F  F0 4E         BEQ .end_verify
  404                         ;This check is just to make sure it's not our unit we're checking position against
  405  00:E341  B9 00 22      LDA $2200,Y
  406  00:E344  D0 03         BNE .cont_v
  407  00:E346  E8            INX
  408  00:E347  80 36         BRA .next_verify
  409  00:E349            .cont_v
  410  00:E349  18            CLC
  411  00:E34A  CC 10 20      CPY $2010
  412  00:E34D  D0 02         BNE .verify 
  413  00:E34F  80 2E         BRA .next_verify
  414                     
  415  00:E351            .verify:
  416  00:E351  A5 0A         lda <unit_y ;current unit y
  417  00:E353  38            SEC
  418  00:E354  F9 00 22      SBC $2200,Y ;n unit's Y
  419  00:E357  B0 04         BCS .cont_x_verify
  420  00:E359  49 FF         EOR #$FF
  421  00:E35B  69 01         ADC #$01
  422                     
  423  00:E35D            .cont_x_verify
  424  00:E35D  8D FF 20      STA $20FF
  425                     
  426  00:E360  C8            iny
  427  00:E361  C8            iny
  428  00:E362  A5 09         lda <unit_x ;current unit y
  429  00:E364  38            SEC
  430  00:E365  F9 00 22      SBC $2200,Y ;n unit's Y
  431  00:E368  B0 04         BCS .cont_verify
  432  00:E36A  49 FF         EOR #$FF
  433  00:E36C  69 01         ADC #$01
  434                     
  435  00:E36E            .cont_verify
  436  00:E36E  88            DEY
  437  00:E36F  88            DEY
  438  00:E370  8D FE 20      STA $20FE   
  439  00:E373  A9 20         LDA #$20 ;CHANGE HERE
  440  00:E375  CD FF 20      CMP $20FF
  441  00:E378  30 05         BMI .next_verify
  442  00:E37A  ED FE 20      SBC $20FE
  443  00:E37D  10 0B         BPL .cant_move
  444                     
  445  00:E37F            .next_verify
  446  00:E37F  98            TYA
  447  00:E380  18            CLC
  448  00:E381  69 10         ADC #$10
  449  00:E383  A8            TAY
  450  00:E384  CA            DEX
  451  00:E385  9C FF 20      stz $20FF
  452  00:E388  80 B5         BRA .verify_loop
  453                     
  454  00:E38A            .cant_move
  455  00:E38A  A9 01         lda #$01
  456  00:E38C  8D FF 20      sta $20FF
  457  00:E38F            .end_verify
  458  00:E38F  7A            ply
  459  00:E390  FA            plx
  460  00:E391  60            rts
  461                     
  462  00:E392            ATTACK
  463  00:E392  20 C3 E3      JSR GET_FRAME ;loads frame number into A
  464  00:E395  2F 17 2A      BBR2 <frame_state, .end_attack
  465  00:E398  20 DB E3      JSR GET_OPP_STATE
  466  00:E39B  48            PHA
  467  00:E39C  29 10         AND #$10
  468  00:E39E  F0 21         BEQ .end_a ;opp state is already dead, so no need to do anything else
  469  00:E3A0  20 EA E3      JSR GET_UNIT_ADVANTAGE
  470  00:E3A3  20 ED E3      JSR SCRAMBLE_RAND
  471  00:E3A6  E5 18         SBC <PRN0
  472  00:E3A8  90 17         BCC .end_a
  473                         ;Set opp state to dead, also reset their frame state
  474  00:E3AA  68            pla
  475  00:E3AB  49 10         EOR #$10
  476  00:E3AD  AA            TAX
  477  00:E3AE  A5 14         LDA <opp_pointer
  478  00:E3B0  18            CLC
  479  00:E3B1  69 06         ADC #$06
  480  00:E3B3  A8            TAY
  481  00:E3B4  8A            TXA 
  482  00:E3B5  99 00 22      STA $2200, Y
  483  00:E3B8  88            DEY
  484  00:E3B9  88            DEY
  485  00:E3BA  A9 C0         LDA #$C0 ;store move frame?
  486  00:E3BC  99 00 22      STA $2200, Y
  487  00:E3BF  80 01         BRA .end_attack 
  488                     
  489  00:E3C1            .end_a
  490  00:E3C1  68            pla
  491  00:E3C2            .end_attack    
  492  00:E3C2  60            rts
  493                     
  494  00:E3C3            GET_FRAME ;1-4
  495  00:E3C3  DA            phx
  496  00:E3C4  5A            phy
  497  00:E3C5  82            CLX 
  498  00:E3C6  A0 04         LDY #$04
  499  00:E3C8  B1 10         LDA [$10], Y
  500  00:E3CA  38            SEC
  501  00:E3CB            .reduce_frame
  502  00:E3CB  E9 20         SBC #$20
  503  00:E3CD  B0 FC         BCS .reduce_frame
  504  00:E3CF  69 20         ADC #$20
  505  00:E3D1            .divide_frame
  506  00:E3D1  E8            INX
  507  00:E3D2  E9 08         SBC #$08
  508  00:E3D4  B0 FB         BCS .divide_frame
  509                     
  510  00:E3D6  86 17         STX <frame_state
  511  00:E3D8  7A            ply
  512  00:E3D9  FA            plx
  513  00:E3DA  60            rts
  514                     
  515  00:E3DB            GET_OPP_STATE
  516  00:E3DB  A5 14         LDA <opp_pointer
  517  00:E3DD  18            CLC 
  518  00:E3DE  69 06         ADC #$06
  519  00:E3E0  A8            TAY
  520  00:E3E1  B9 00 22      LDA $2200, Y
  521  00:E3E4  60            rts
  522                     
  523  00:E3E5            GET_STATE
  524  00:E3E5  A0 06         LDY #$06
  525  00:E3E7  B1 10         LDA [$10], Y
  526  00:E3E9  60            rts
  527                     
  528  00:E3EA            GET_UNIT_ADVANTAGE
  529  00:E3EA  A9 10         lda #$10
  530  00:E3EC  60            rts
  531                     
  532  00:E3ED            SCRAMBLE_RAND ;bettween 0-100
  533  00:E3ED  48            pha
  534  00:E3EE  A5 18         LDA <PRN0
  535  00:E3F0  65 19         ADC <PRN1
  536  00:E3F2  85 19         STA <PRN1
  537  00:E3F4  A5 19         LDA <PRN1
  538  00:E3F6  68            pla
  539  00:E3F7  60            rts
#[1]   TurboForce.asm
  114                     
  115  00:E3F8            MY_VSYNC:
  116                             ;BORD_RED
  117  00:E3F8  48                pha
  118  00:E3F9  68                pla
  119  00:E3FA  48                pha
  120  00:E3FB  68                pla
  121                             ;BORD_BLUE
  122                             ;BG_BLACK
  123                     
  124  00:E3FC  E6 03             inc     <vb_count
  125  00:E3FE  60                rts
  126                     
  127  00:E3FF            MY_HSYNC:
  128                             ;BORD_WHITE
  129                             ;BG_CYAN
  130                     
  131                             vreg    #6      ;Scanline compare register
       00:E3FF  A9 06             lda     #6
       00:E401  85 F7             sta     <_vreg
       00:E403  8D 00 00          sta     video_reg
  132  00:E406  13 00             st1             #$00    ;No more Hsyncs.
  133  00:E408  23 00             st2             #$00
  134                     
  135                             ;BORD_DKBLU
  136                             ;BG_GREY2
  137                     
  138  00:E40A  60                rts
  139                     
  140                     
  141                     
  142                     ;Intro_Text:
  143                           ;0123456789ABCDEF0123456789ABCDEF
  144                      ;.db "THIS IS OUR FIRST ON-SCREEN TEXT"
  145                      ;.db "SCANLINE SPLIT NOW AT: XXX      ",0
  146                     
  147                     
  148                     ;============================================================
  149                     ; Other includes / banks go here (for now)
  150                     
#[2]   INCLUDE\gfx_work.asm
  151                             .include "INCLUDE\gfx_work.asm"
    1                     ;
    2                     ; Graphics routines that I write will go here
    3                     ;
    4                     
    5  00:E40B            Clear_BAT:
    6                             vreg    #$00
       00:E40B  A9 00             lda     #$00
       00:E40D  85 F7             sta     <_vreg
       00:E40F  8D 00 00          sta     video_reg
    7                             stwz    video_data
       00:E412  9C 02 00           stz    LOW_BYTE video_data
       00:E415  9C 03 00           stz    HIGH_BYTE video_data
    8                             vreg    #$02
       00:E418  A9 02             lda     #$02
       00:E41A  85 F7             sta     <_vreg
       00:E41C  8D 00 00          sta     video_reg
    9                     
   10  00:E41F  A2 00             ldx             #LOW(BATWIDTH*BATHEIGHT)
   11  00:E421  A0 04             ldy     #HIGH(BATWIDTH*BATHEIGHT)
   12  00:E423            .clrlp:
   13  00:E423  13 20             st1     #$20    ;"whitespace character"
   14  00:E425  23 01             st2     #$01
   15  00:E427  CA                dex
   16  00:E428  D0 F9             bne     .clrlp
   17  00:E42A  88                dey
   18  00:E42B  D0 F6             bne     .clrlp
   19  00:E42D  60                rts
   20                     
   21                     
   22                     ;Print_Byte:    ;Prints a byte as HEX
   23                     ;       pha
   24                     ;       lsr a
   25                     ;       lsr a
   26                     ;       lsr a
   27                     ;       lsr a
   28                                     ;store char # (0-F) of high nyb
   29                     ;       ora     #LOW(HEX_VRAM/16)
   30                     ;       sta     video_data
   31                     ;       lda     #$00+(HEX_VRAM/4096) ;font pal + tile no.
   32                     ;       sta     video_data+1
   33                     ;       pla
   34                     ;Print_Nyb:
   35                     ;       pha
   36                     ;       and     #$0F    ;isolate low nyb.
   37                     ;       ora     #LOW(HEX_VRAM/16)
   38                     ;       sta     video_data
   39                     ;       lda     #$00+(HEX_VRAM/4096) ;font pal + tile no.
   40                     ;       sta     video_data+1
   41                     ;       pla
   42                     ;       rts
   43                     
   44                     ;Print_Text:                    ;_si points to zero-terminated text
   45                     ;       jsr     set_write       ;_di points to VRAM add.
   46                     ;Print_Tex2:
   47                     ;       cly
   48                     ;       ldx     #$00+(ASCII_VRAM/4096)  ;Palette 0, $1000 VRAM
   49                     ;.loop1:
   50                     ;       lda     [_si],Y
   51                     ;       beq     .finish
   52                     ;       sta     video_data
   53                     ;       stx     video_data+1
   54                     ;       incw    <_si
   55                     ;       bra     .loop1
   56                     ;.finish:
   57                     ;       rts
   58                     
   59                     
   60  00:E42E            Draw_BonkBG:    ;draws 16x16 tile box w/ graphics on-screen
   61                             ;stw    #(1*$1000)+(BONKBG_VRAM/16),<_si ;Pal 1 + Tile No.
   62                             stw #$1100,<_si
       00:E42E  A9 00              lda    LOW_BYTE #$1100
       00:E430  85 EE              sta    LOW_BYTE <_si
       00:E432  A9 11              lda    HIGH_BYTE #$1100
       00:E434  85 EF              sta    HIGH_BYTE <_si
   63                             stw     #$0000,<_di
       00:E436  A9 00              lda    LOW_BYTE #$0000
       00:E438  85 F0              sta    LOW_BYTE <_di
       00:E43A  A9 00              lda    HIGH_BYTE #$0000
       00:E43C  85 F1              sta    HIGH_BYTE <_di
   64  00:E43E  20 99 FE          jsr     set_write       ;set VRAM address
   65                     
   66  00:E441  A0 20             ldy     #BATWIDTH               ;outer loop (vert. lines)
   67  00:E443            .bonklp0:
   68  00:E443  A2 20             ldx     #BATHEIGHT              ;inner loop (horiz. tiles)
   69  00:E445            .bonklp1:
   70                             stw     <_si,video_data ;lay down tile definition
       00:E445  A5 EE              lda    LOW_BYTE <_si
       00:E447  8D 02 00           sta    LOW_BYTE video_data
       00:E44A  A5 EF              lda    HIGH_BYTE <_si
       00:E44C  8D 03 00           sta    HIGH_BYTE video_data
   71                             incw    <_si
       00:E44F  E6 EE              inc    <_si              ; value at stated memory
       00:E451  D0 02              bne    .x_00057           ; location
       00:E453  E6 EF              inc    <_si+1
       00:E455            .x_00057:
   72  00:E455  CA                dex
   73  00:E456  D0 ED             bne     .bonklp1
   74                             addw    #BATWIDTH,<_di  ;then jump down to next line
                0000              .if     (2 = 3)
                                  .else
                                   ; 2-arg mode
                                   ;
       00:E458  18                 clc
       00:E459  A5 F0              lda    LOW_BYTE <_di
       00:E45B  69 20              adc    LOW_BYTE #BATWIDTH
       00:E45D  85 F0              sta    LOW_BYTE <_di
       00:E45F  A5 F1              lda    HIGH_BYTE <_di
       00:E461  69 00              adc    HIGH_BYTE #BATWIDTH
       00:E463  85 F1              sta    HIGH_BYTE <_di
                                  .endif
   75  00:E465  20 99 FE          jsr     set_write
   76  00:E468  88                dey
   77  00:E469  D0 D8             bne     .bonklp0
   78                     
   79  00:E46B  60                rts
   80                     
   81                     
   82  00:E46C            Setup_Sprites:
   83                     
   84  00:E46C  9C 00 22          stz     satb    ;zero out sprite table
   85  00:E46F  73 00 22          tii     satb,satb+1,511
       00:E472  01 22 FF  
       00:E475  01        
   86                     
   87                             ;---------------------------;
   88                             ;                       ARMY 1                  ;
   89                             ;---------------------------;
   90                             ;stw    #$00DA,satb     ;Y-pos
   91                             ;stw    #$0040,satb+2   ;X-pos
   92                             ;stw    #(BONKSP_VRAM/32),satb+4 ;Tile No.
   93                             ;stw    #%0_0_01_0_00_1_1_001_0000,satb+6 ;Attributes
   94                     
   95                             stw     #$00F8,satb+16-16       ;Y-pos
       00:E476  A9 F8              lda    LOW_BYTE #$00F8
       00:E478  8D 00 22           sta    LOW_BYTE satb+16-16
       00:E47B  A9 00              lda    HIGH_BYTE #$00F8
       00:E47D  8D 01 22           sta    HIGH_BYTE satb+16-16
   96                             stw     #$0048,satb+2+16-16     ;X-pos
       00:E480  A9 48              lda    LOW_BYTE #$0048
       00:E482  8D 02 22           sta    LOW_BYTE satb+2+16-16
       00:E485  A9 00              lda    HIGH_BYTE #$0048
       00:E487  8D 03 22           sta    HIGH_BYTE satb+2+16-16
   97                             stw     #(BONKSP_VRAM/32),satb+4+16-16 ;Tile No.
       00:E48A  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E48C  8D 04 22           sta    LOW_BYTE satb+4+16-16
       00:E48F  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E491  8D 05 22           sta    HIGH_BYTE satb+4+16-16
   98                             stw     #%0_0_01_0_00_1_1_001_0000,satb+6+16-16 ;Attributes
       00:E494  A9 90              lda    LOW_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E496  8D 06 22           sta    LOW_BYTE satb+6+16-16
       00:E499  A9 11              lda    HIGH_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E49B  8D 07 22           sta    HIGH_BYTE satb+6+16-16
   99                     
  100                             stw     #$00D6,satb+32-16       ;Y-pos
       00:E49E  A9 D6              lda    LOW_BYTE #$00D6
       00:E4A0  8D 10 22           sta    LOW_BYTE satb+32-16
       00:E4A3  A9 00              lda    HIGH_BYTE #$00D6
       00:E4A5  8D 11 22           sta    HIGH_BYTE satb+32-16
  101                             stw     #$0050,satb+2+32-16     ;X-pos
       00:E4A8  A9 50              lda    LOW_BYTE #$0050
       00:E4AA  8D 12 22           sta    LOW_BYTE satb+2+32-16
       00:E4AD  A9 00              lda    HIGH_BYTE #$0050
       00:E4AF  8D 13 22           sta    HIGH_BYTE satb+2+32-16
  102                             stw     #(BONKSP_VRAM/32),satb+4+32-16 ;Tile No.
       00:E4B2  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E4B4  8D 14 22           sta    LOW_BYTE satb+4+32-16
       00:E4B7  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E4B9  8D 15 22           sta    HIGH_BYTE satb+4+32-16
  103                             stw     #%0_0_01_0_00_1_1_001_0000,satb+6+32-16 ;Attributes
       00:E4BC  A9 90              lda    LOW_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E4BE  8D 16 22           sta    LOW_BYTE satb+6+32-16
       00:E4C1  A9 11              lda    HIGH_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E4C3  8D 17 22           sta    HIGH_BYTE satb+6+32-16
  104                     
  105                             stw     #$00B4,satb+48-16       ;Y-pos
       00:E4C6  A9 B4              lda    LOW_BYTE #$00B4
       00:E4C8  8D 20 22           sta    LOW_BYTE satb+48-16
       00:E4CB  A9 00              lda    HIGH_BYTE #$00B4
       00:E4CD  8D 21 22           sta    HIGH_BYTE satb+48-16
  106                             stw     #$0058,satb+2+48-16     ;X-pos
       00:E4D0  A9 58              lda    LOW_BYTE #$0058
       00:E4D2  8D 22 22           sta    LOW_BYTE satb+2+48-16
       00:E4D5  A9 00              lda    HIGH_BYTE #$0058
       00:E4D7  8D 23 22           sta    HIGH_BYTE satb+2+48-16
  107                             stw     #(BONKSP_VRAM/32),satb+4+48-16 ;Tile No.
       00:E4DA  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E4DC  8D 24 22           sta    LOW_BYTE satb+4+48-16
       00:E4DF  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E4E1  8D 25 22           sta    HIGH_BYTE satb+4+48-16
  108                             stw     #%0_0_01_0_00_1_1_001_0000,satb+6+48-16 ;Attributes
       00:E4E4  A9 90              lda    LOW_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E4E6  8D 26 22           sta    LOW_BYTE satb+6+48-16
       00:E4E9  A9 11              lda    HIGH_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E4EB  8D 27 22           sta    HIGH_BYTE satb+6+48-16
  109                     
  110                             stw     #$0092,satb+64-16       ;Y-pos
       00:E4EE  A9 92              lda    LOW_BYTE #$0092
       00:E4F0  8D 30 22           sta    LOW_BYTE satb+64-16
       00:E4F3  A9 00              lda    HIGH_BYTE #$0092
       00:E4F5  8D 31 22           sta    HIGH_BYTE satb+64-16
  111                             stw     #$0060,satb+2+64-16     ;X-pos
       00:E4F8  A9 60              lda    LOW_BYTE #$0060
       00:E4FA  8D 32 22           sta    LOW_BYTE satb+2+64-16
       00:E4FD  A9 00              lda    HIGH_BYTE #$0060
       00:E4FF  8D 33 22           sta    HIGH_BYTE satb+2+64-16
  112                             stw     #(BONKSP_VRAM/32),satb+4+64-16 ;Tile No.
       00:E502  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E504  8D 34 22           sta    LOW_BYTE satb+4+64-16
       00:E507  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E509  8D 35 22           sta    HIGH_BYTE satb+4+64-16
  113                             stw     #%0_0_01_0_00_1_1_001_0000,satb+6+64-16 ;Attributes
       00:E50C  A9 90              lda    LOW_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E50E  8D 36 22           sta    LOW_BYTE satb+6+64-16
       00:E511  A9 11              lda    HIGH_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E513  8D 37 22           sta    HIGH_BYTE satb+6+64-16
  114                     
  115                             stw     #$0070,satb+80-16       ;Y-pos
       00:E516  A9 70              lda    LOW_BYTE #$0070
       00:E518  8D 40 22           sta    LOW_BYTE satb+80-16
       00:E51B  A9 00              lda    HIGH_BYTE #$0070
       00:E51D  8D 41 22           sta    HIGH_BYTE satb+80-16
  116                             stw     #$0068,satb+2+80-16     ;X-pos
       00:E520  A9 68              lda    LOW_BYTE #$0068
       00:E522  8D 42 22           sta    LOW_BYTE satb+2+80-16
       00:E525  A9 00              lda    HIGH_BYTE #$0068
       00:E527  8D 43 22           sta    HIGH_BYTE satb+2+80-16
  117                             stw     #(BONKSP_VRAM/32),satb+4+80-16 ;Tile No.
       00:E52A  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E52C  8D 44 22           sta    LOW_BYTE satb+4+80-16
       00:E52F  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E531  8D 45 22           sta    HIGH_BYTE satb+4+80-16
  118                             stw     #%0_0_01_0_00_1_1_001_0000,satb+6+80-16 ;Attributes
       00:E534  A9 90              lda    LOW_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E536  8D 46 22           sta    LOW_BYTE satb+6+80-16
       00:E539  A9 11              lda    HIGH_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E53B  8D 47 22           sta    HIGH_BYTE satb+6+80-16
  119                     
  120                             ;---------------------------;
  121                             ;                       ARMY 1  cont    ;
  122                             ;---------------------------;
  123                             ;stw    #$00DA,satb+96  ;Y-pos
  124                             ;stw    #$0020,satb+2+96        ;X-pos
  125                             ;stw    #(BONKSP_VRAM/32),satb+4+96 ;Tile No.
  126                             ;stw    #%0_0_01_0_00_1_1_001_0000,satb+6+96 ;Attributes
  127                     
  128                             stw     #$00F8,satb+112-32      ;Y-pos
       00:E53E  A9 F8              lda    LOW_BYTE #$00F8
       00:E540  8D 50 22           sta    LOW_BYTE satb+112-32
       00:E543  A9 00              lda    HIGH_BYTE #$00F8
       00:E545  8D 51 22           sta    HIGH_BYTE satb+112-32
  129                             stw     #$0028,satb+2+112-32    ;X-pos
       00:E548  A9 28              lda    LOW_BYTE #$0028
       00:E54A  8D 52 22           sta    LOW_BYTE satb+2+112-32
       00:E54D  A9 00              lda    HIGH_BYTE #$0028
       00:E54F  8D 53 22           sta    HIGH_BYTE satb+2+112-32
  130                             stw     #(BONKSP_VRAM/32),satb+4+112-32 ;Tile No.
       00:E552  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E554  8D 54 22           sta    LOW_BYTE satb+4+112-32
       00:E557  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E559  8D 55 22           sta    HIGH_BYTE satb+4+112-32
  131                             stw     #%0_0_01_0_00_1_1_001_0000,satb+6+112-32 ;Attributes
       00:E55C  A9 90              lda    LOW_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E55E  8D 56 22           sta    LOW_BYTE satb+6+112-32
       00:E561  A9 11              lda    HIGH_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E563  8D 57 22           sta    HIGH_BYTE satb+6+112-32
  132                     
  133                             stw     #$00D6,satb+128-32      ;Y-pos
       00:E566  A9 D6              lda    LOW_BYTE #$00D6
       00:E568  8D 60 22           sta    LOW_BYTE satb+128-32
       00:E56B  A9 00              lda    HIGH_BYTE #$00D6
       00:E56D  8D 61 22           sta    HIGH_BYTE satb+128-32
  134                             stw     #$0030,satb+2+128-32    ;X-pos
       00:E570  A9 30              lda    LOW_BYTE #$0030
       00:E572  8D 62 22           sta    LOW_BYTE satb+2+128-32
       00:E575  A9 00              lda    HIGH_BYTE #$0030
       00:E577  8D 63 22           sta    HIGH_BYTE satb+2+128-32
  135                             stw     #(BONKSP_VRAM/32),satb+4+128-32 ;Tile No.
       00:E57A  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E57C  8D 64 22           sta    LOW_BYTE satb+4+128-32
       00:E57F  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E581  8D 65 22           sta    HIGH_BYTE satb+4+128-32
  136                             stw     #%0_0_01_0_00_1_1_001_0000,satb+6+128-32 ;Attributes
       00:E584  A9 90              lda    LOW_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E586  8D 66 22           sta    LOW_BYTE satb+6+128-32
       00:E589  A9 11              lda    HIGH_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E58B  8D 67 22           sta    HIGH_BYTE satb+6+128-32
  137                     
  138                             stw     #$00B4,satb+144-32      ;Y-pos
       00:E58E  A9 B4              lda    LOW_BYTE #$00B4
       00:E590  8D 70 22           sta    LOW_BYTE satb+144-32
       00:E593  A9 00              lda    HIGH_BYTE #$00B4
       00:E595  8D 71 22           sta    HIGH_BYTE satb+144-32
  139                             stw     #$0038,satb+2+144-32    ;X-pos
       00:E598  A9 38              lda    LOW_BYTE #$0038
       00:E59A  8D 72 22           sta    LOW_BYTE satb+2+144-32
       00:E59D  A9 00              lda    HIGH_BYTE #$0038
       00:E59F  8D 73 22           sta    HIGH_BYTE satb+2+144-32
  140                             stw     #(BONKSP_VRAM/32),satb+4+144-32 ;Tile No.
       00:E5A2  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E5A4  8D 74 22           sta    LOW_BYTE satb+4+144-32
       00:E5A7  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E5A9  8D 75 22           sta    HIGH_BYTE satb+4+144-32
  141                             stw     #%0_0_01_0_00_1_1_001_0000,satb+6+144-32 ;Attributes
       00:E5AC  A9 90              lda    LOW_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E5AE  8D 76 22           sta    LOW_BYTE satb+6+144-32
       00:E5B1  A9 11              lda    HIGH_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E5B3  8D 77 22           sta    HIGH_BYTE satb+6+144-32
  142                     
  143                             stw     #$0092,satb+160-32      ;Y-pos
       00:E5B6  A9 92              lda    LOW_BYTE #$0092
       00:E5B8  8D 80 22           sta    LOW_BYTE satb+160-32
       00:E5BB  A9 00              lda    HIGH_BYTE #$0092
       00:E5BD  8D 81 22           sta    HIGH_BYTE satb+160-32
  144                             stw     #$0040,satb+2+160-32    ;X-pos
       00:E5C0  A9 40              lda    LOW_BYTE #$0040
       00:E5C2  8D 82 22           sta    LOW_BYTE satb+2+160-32
       00:E5C5  A9 00              lda    HIGH_BYTE #$0040
       00:E5C7  8D 83 22           sta    HIGH_BYTE satb+2+160-32
  145                             stw     #(BONKSP_VRAM/32),satb+4+160-32;Tile No.
       00:E5CA  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E5CC  8D 84 22           sta    LOW_BYTE satb+4+160-32
       00:E5CF  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E5D1  8D 85 22           sta    HIGH_BYTE satb+4+160-32
  146                             stw     #%0_0_01_0_00_1_1_001_0000,satb+6+160-32;Attributes
       00:E5D4  A9 90              lda    LOW_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E5D6  8D 86 22           sta    LOW_BYTE satb+6+160-32
       00:E5D9  A9 11              lda    HIGH_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E5DB  8D 87 22           sta    HIGH_BYTE satb+6+160-32
  147                     
  148                             stw     #$0070,satb+176-32      ;Y-pos
       00:E5DE  A9 70              lda    LOW_BYTE #$0070
       00:E5E0  8D 90 22           sta    LOW_BYTE satb+176-32
       00:E5E3  A9 00              lda    HIGH_BYTE #$0070
       00:E5E5  8D 91 22           sta    HIGH_BYTE satb+176-32
  149                             stw     #$0048,satb+2+176-32    ;X-pos
       00:E5E8  A9 48              lda    LOW_BYTE #$0048
       00:E5EA  8D 92 22           sta    LOW_BYTE satb+2+176-32
       00:E5ED  A9 00              lda    HIGH_BYTE #$0048
       00:E5EF  8D 93 22           sta    HIGH_BYTE satb+2+176-32
  150                             stw     #(BONKSP_VRAM/32),satb+4+176-32 ;Tile No.
       00:E5F2  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E5F4  8D 94 22           sta    LOW_BYTE satb+4+176-32
       00:E5F7  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E5F9  8D 95 22           sta    HIGH_BYTE satb+4+176-32
  151                             stw     #%0_0_01_0_00_1_1_001_0000,satb+6+176-32 ;Attributes
       00:E5FC  A9 90              lda    LOW_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E5FE  8D 96 22           sta    LOW_BYTE satb+6+176-32
       00:E601  A9 11              lda    HIGH_BYTE #%0_0_01_0_00_1_1_001_0000
       00:E603  8D 97 22           sta    HIGH_BYTE satb+6+176-32
  152                     
  153                             ;---------------------------;
  154                             ;                       ARMY 2                  ;
  155                             ;---------------------------;
  156                             ;stw    #$00DA,satb+8   ;Y-pos
  157                             ;stw    #$00C0,satb+2+8 ;X-pos
  158                             ;stw    #(BONKSP_VRAM/32),satb+4+8 ;Tile No.
  159                             ;stw    #%0_0_01_1_00_1_1_001_0001,satb+6+8 ;Attributes
  160                     
  161                             stw     #$00F8,satb+24-16       ;Y-pos
       00:E606  A9 F8              lda    LOW_BYTE #$00F8
       00:E608  8D 08 22           sta    LOW_BYTE satb+24-16
       00:E60B  A9 00              lda    HIGH_BYTE #$00F8
       00:E60D  8D 09 22           sta    HIGH_BYTE satb+24-16
  162                             stw     #$00B8,satb+2+24-16     ;X-pos
       00:E610  A9 B8              lda    LOW_BYTE #$00B8
       00:E612  8D 0A 22           sta    LOW_BYTE satb+2+24-16
       00:E615  A9 00              lda    HIGH_BYTE #$00B8
       00:E617  8D 0B 22           sta    HIGH_BYTE satb+2+24-16
  163                             stw     #(BONKSP_VRAM/32),satb+4+24-16 ;Tile No.
       00:E61A  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E61C  8D 0C 22           sta    LOW_BYTE satb+4+24-16
       00:E61F  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E621  8D 0D 22           sta    HIGH_BYTE satb+4+24-16
  164                             stw     #%0_0_01_1_00_1_1_001_0001,satb+6+24-16 ;Attributes
       00:E624  A9 91              lda    LOW_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E626  8D 0E 22           sta    LOW_BYTE satb+6+24-16
       00:E629  A9 19              lda    HIGH_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E62B  8D 0F 22           sta    HIGH_BYTE satb+6+24-16
  165                     
  166                             stw     #$00D6,satb+40-16       ;Y-pos
       00:E62E  A9 D6              lda    LOW_BYTE #$00D6
       00:E630  8D 18 22           sta    LOW_BYTE satb+40-16
       00:E633  A9 00              lda    HIGH_BYTE #$00D6
       00:E635  8D 19 22           sta    HIGH_BYTE satb+40-16
  167                             stw     #$00B0,satb+2+40-16     ;X-pos
       00:E638  A9 B0              lda    LOW_BYTE #$00B0
       00:E63A  8D 1A 22           sta    LOW_BYTE satb+2+40-16
       00:E63D  A9 00              lda    HIGH_BYTE #$00B0
       00:E63F  8D 1B 22           sta    HIGH_BYTE satb+2+40-16
  168                             stw     #(BONKSP_VRAM/32),satb+4+40-16 ;Tile No.
       00:E642  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E644  8D 1C 22           sta    LOW_BYTE satb+4+40-16
       00:E647  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E649  8D 1D 22           sta    HIGH_BYTE satb+4+40-16
  169                             stw     #%0_0_01_1_00_1_1_001_0001,satb+6+40-16 ;Attributes
       00:E64C  A9 91              lda    LOW_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E64E  8D 1E 22           sta    LOW_BYTE satb+6+40-16
       00:E651  A9 19              lda    HIGH_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E653  8D 1F 22           sta    HIGH_BYTE satb+6+40-16
  170                     
  171                             stw     #$00B4,satb+56-16       ;Y-pos
       00:E656  A9 B4              lda    LOW_BYTE #$00B4
       00:E658  8D 28 22           sta    LOW_BYTE satb+56-16
       00:E65B  A9 00              lda    HIGH_BYTE #$00B4
       00:E65D  8D 29 22           sta    HIGH_BYTE satb+56-16
  172                             stw     #$00A8,satb+2+56-16     ;X-pos
       00:E660  A9 A8              lda    LOW_BYTE #$00A8
       00:E662  8D 2A 22           sta    LOW_BYTE satb+2+56-16
       00:E665  A9 00              lda    HIGH_BYTE #$00A8
       00:E667  8D 2B 22           sta    HIGH_BYTE satb+2+56-16
  173                             stw     #(BONKSP_VRAM/32),satb+4+56-16 ;Tile No.
       00:E66A  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E66C  8D 2C 22           sta    LOW_BYTE satb+4+56-16
       00:E66F  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E671  8D 2D 22           sta    HIGH_BYTE satb+4+56-16
  174                             stw     #%0_0_01_1_00_1_1_001_0001,satb+6+56-16 ;Attributes
       00:E674  A9 91              lda    LOW_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E676  8D 2E 22           sta    LOW_BYTE satb+6+56-16
       00:E679  A9 19              lda    HIGH_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E67B  8D 2F 22           sta    HIGH_BYTE satb+6+56-16
  175                     
  176                             stw     #$0092,satb+72-16       ;Y-pos
       00:E67E  A9 92              lda    LOW_BYTE #$0092
       00:E680  8D 38 22           sta    LOW_BYTE satb+72-16
       00:E683  A9 00              lda    HIGH_BYTE #$0092
       00:E685  8D 39 22           sta    HIGH_BYTE satb+72-16
  177                             stw     #$00A0,satb+2+72-16     ;X-pos
       00:E688  A9 A0              lda    LOW_BYTE #$00A0
       00:E68A  8D 3A 22           sta    LOW_BYTE satb+2+72-16
       00:E68D  A9 00              lda    HIGH_BYTE #$00A0
       00:E68F  8D 3B 22           sta    HIGH_BYTE satb+2+72-16
  178                             stw     #(BONKSP_VRAM/32),satb+4+72-16 ;Tile No.
       00:E692  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E694  8D 3C 22           sta    LOW_BYTE satb+4+72-16
       00:E697  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E699  8D 3D 22           sta    HIGH_BYTE satb+4+72-16
  179                             stw     #%0_0_01_1_00_1_1_001_0001,satb+6+72-16 ;Attributes
       00:E69C  A9 91              lda    LOW_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E69E  8D 3E 22           sta    LOW_BYTE satb+6+72-16
       00:E6A1  A9 19              lda    HIGH_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E6A3  8D 3F 22           sta    HIGH_BYTE satb+6+72-16
  180                     
  181                             stw     #$0070,satb+88-16       ;Y-pos
       00:E6A6  A9 70              lda    LOW_BYTE #$0070
       00:E6A8  8D 48 22           sta    LOW_BYTE satb+88-16
       00:E6AB  A9 00              lda    HIGH_BYTE #$0070
       00:E6AD  8D 49 22           sta    HIGH_BYTE satb+88-16
  182                             stw     #$0098,satb+2+88-16     ;X-pos
       00:E6B0  A9 98              lda    LOW_BYTE #$0098
       00:E6B2  8D 4A 22           sta    LOW_BYTE satb+2+88-16
       00:E6B5  A9 00              lda    HIGH_BYTE #$0098
       00:E6B7  8D 4B 22           sta    HIGH_BYTE satb+2+88-16
  183                             stw     #(BONKSP_VRAM/32),satb+4+88-16 ;Tile No.
       00:E6BA  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E6BC  8D 4C 22           sta    LOW_BYTE satb+4+88-16
       00:E6BF  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E6C1  8D 4D 22           sta    HIGH_BYTE satb+4+88-16
  184                             stw     #%0_0_01_1_00_1_1_001_0001,satb+6+88-16 ;Attributes
       00:E6C4  A9 91              lda    LOW_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E6C6  8D 4E 22           sta    LOW_BYTE satb+6+88-16
       00:E6C9  A9 19              lda    HIGH_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E6CB  8D 4F 22           sta    HIGH_BYTE satb+6+88-16
  185                     
  186                             ;---------------------------;
  187                             ;                       ARMY 2 cont             ;
  188                             ;---------------------------;
  189                             ;stw    #$00DA,satb+104 ;Y-pos
  190                             ;stw    #$00E0,satb+2+104       ;X-pos
  191                             ;stw    #(BONKSP_VRAM/32),satb+4+104 ;Tile No.
  192                             ;stw    #%0_0_01_1_00_1_1_001_0001,satb+6+104 ;Attributes
  193                     
  194                             stw     #$00F8,satb+120-32      ;Y-pos
       00:E6CE  A9 F8              lda    LOW_BYTE #$00F8
       00:E6D0  8D 58 22           sta    LOW_BYTE satb+120-32
       00:E6D3  A9 00              lda    HIGH_BYTE #$00F8
       00:E6D5  8D 59 22           sta    HIGH_BYTE satb+120-32
  195                             stw     #$00D8,satb+2+120-32    ;X-pos
       00:E6D8  A9 D8              lda    LOW_BYTE #$00D8
       00:E6DA  8D 5A 22           sta    LOW_BYTE satb+2+120-32
       00:E6DD  A9 00              lda    HIGH_BYTE #$00D8
       00:E6DF  8D 5B 22           sta    HIGH_BYTE satb+2+120-32
  196                             stw     #(BONKSP_VRAM/32),satb+4+120-32 ;Tile No.
       00:E6E2  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E6E4  8D 5C 22           sta    LOW_BYTE satb+4+120-32
       00:E6E7  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E6E9  8D 5D 22           sta    HIGH_BYTE satb+4+120-32
  197                             stw     #%0_0_01_1_00_1_1_001_0001,satb+6+120-32 ;Attributes
       00:E6EC  A9 91              lda    LOW_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E6EE  8D 5E 22           sta    LOW_BYTE satb+6+120-32
       00:E6F1  A9 19              lda    HIGH_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E6F3  8D 5F 22           sta    HIGH_BYTE satb+6+120-32
  198                     
  199                             stw     #$00D6,satb+136-32      ;Y-pos
       00:E6F6  A9 D6              lda    LOW_BYTE #$00D6
       00:E6F8  8D 68 22           sta    LOW_BYTE satb+136-32
       00:E6FB  A9 00              lda    HIGH_BYTE #$00D6
       00:E6FD  8D 69 22           sta    HIGH_BYTE satb+136-32
  200                             stw     #$00D0,satb+2+136-32    ;X-pos
       00:E700  A9 D0              lda    LOW_BYTE #$00D0
       00:E702  8D 6A 22           sta    LOW_BYTE satb+2+136-32
       00:E705  A9 00              lda    HIGH_BYTE #$00D0
       00:E707  8D 6B 22           sta    HIGH_BYTE satb+2+136-32
  201                             stw     #(BONKSP_VRAM/32),satb+4+136-32 ;Tile No.
       00:E70A  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E70C  8D 6C 22           sta    LOW_BYTE satb+4+136-32
       00:E70F  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E711  8D 6D 22           sta    HIGH_BYTE satb+4+136-32
  202                             stw     #%0_0_01_1_00_1_1_001_0001,satb+6+136-32 ;Attributes
       00:E714  A9 91              lda    LOW_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E716  8D 6E 22           sta    LOW_BYTE satb+6+136-32
       00:E719  A9 19              lda    HIGH_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E71B  8D 6F 22           sta    HIGH_BYTE satb+6+136-32
  203                     
  204                             stw     #$00B4,satb+152-32      ;Y-pos
       00:E71E  A9 B4              lda    LOW_BYTE #$00B4
       00:E720  8D 78 22           sta    LOW_BYTE satb+152-32
       00:E723  A9 00              lda    HIGH_BYTE #$00B4
       00:E725  8D 79 22           sta    HIGH_BYTE satb+152-32
  205                             stw     #$00C8,satb+2+152-32    ;X-pos
       00:E728  A9 C8              lda    LOW_BYTE #$00C8
       00:E72A  8D 7A 22           sta    LOW_BYTE satb+2+152-32
       00:E72D  A9 00              lda    HIGH_BYTE #$00C8
       00:E72F  8D 7B 22           sta    HIGH_BYTE satb+2+152-32
  206                             stw     #(BONKSP_VRAM/32),satb+4+152-32 ;Tile No.
       00:E732  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E734  8D 7C 22           sta    LOW_BYTE satb+4+152-32
       00:E737  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E739  8D 7D 22           sta    HIGH_BYTE satb+4+152-32
  207                             stw     #%0_0_01_1_00_1_1_001_0001,satb+6+152-32 ;Attributes
       00:E73C  A9 91              lda    LOW_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E73E  8D 7E 22           sta    LOW_BYTE satb+6+152-32
       00:E741  A9 19              lda    HIGH_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E743  8D 7F 22           sta    HIGH_BYTE satb+6+152-32
  208                     
  209                             stw     #$0092,satb+168-32      ;Y-pos
       00:E746  A9 92              lda    LOW_BYTE #$0092
       00:E748  8D 88 22           sta    LOW_BYTE satb+168-32
       00:E74B  A9 00              lda    HIGH_BYTE #$0092
       00:E74D  8D 89 22           sta    HIGH_BYTE satb+168-32
  210                             stw     #$00C0,satb+2+168-32    ;X-pos
       00:E750  A9 C0              lda    LOW_BYTE #$00C0
       00:E752  8D 8A 22           sta    LOW_BYTE satb+2+168-32
       00:E755  A9 00              lda    HIGH_BYTE #$00C0
       00:E757  8D 8B 22           sta    HIGH_BYTE satb+2+168-32
  211                             stw     #(BONKSP_VRAM/32),satb+4+168-32 ;Tile No.
       00:E75A  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E75C  8D 8C 22           sta    LOW_BYTE satb+4+168-32
       00:E75F  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E761  8D 8D 22           sta    HIGH_BYTE satb+4+168-32
  212                             stw     #%0_0_01_1_00_1_1_001_0001,satb+6+168-32 ;Attributes
       00:E764  A9 91              lda    LOW_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E766  8D 8E 22           sta    LOW_BYTE satb+6+168-32
       00:E769  A9 19              lda    HIGH_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E76B  8D 8F 22           sta    HIGH_BYTE satb+6+168-32
  213                     
  214                             stw     #$0070,satb+184-32      ;Y-pos
       00:E76E  A9 70              lda    LOW_BYTE #$0070
       00:E770  8D 98 22           sta    LOW_BYTE satb+184-32
       00:E773  A9 00              lda    HIGH_BYTE #$0070
       00:E775  8D 99 22           sta    HIGH_BYTE satb+184-32
  215                             stw     #$00B8,satb+2+184-32    ;X-pos
       00:E778  A9 B8              lda    LOW_BYTE #$00B8
       00:E77A  8D 9A 22           sta    LOW_BYTE satb+2+184-32
       00:E77D  A9 00              lda    HIGH_BYTE #$00B8
       00:E77F  8D 9B 22           sta    HIGH_BYTE satb+2+184-32
  216                             stw     #(BONKSP_VRAM/32),satb+4+184-32 ;Tile No.
       00:E782  A9 80              lda    LOW_BYTE #(BONKSP_VRAM/32)
       00:E784  8D 9C 22           sta    LOW_BYTE satb+4+184-32
       00:E787  A9 01              lda    HIGH_BYTE #(BONKSP_VRAM/32)
       00:E789  8D 9D 22           sta    HIGH_BYTE satb+4+184-32
  217                             stw     #%0_0_01_1_00_1_1_001_0001,satb+6+184-32 ;Attributes
       00:E78C  A9 91              lda    LOW_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E78E  8D 9E 22           sta    LOW_BYTE satb+6+184-32
       00:E791  A9 19              lda    HIGH_BYTE #%0_0_01_1_00_1_1_001_0001
       00:E793  8D 9F 22           sta    HIGH_BYTE satb+6+184-32
  218                     
  219  00:E796  44 01             bsr     Update_SATB_BLOCKTRANSFER
  220  00:E798  60                rts
  221                     
  222  00:E799            Update_SATB_BLOCKTRANSFER:      ;SATB to VRAM (fast)
  223                             stw     #SATB_VRAM,<_di ;default SATB location
       00:E799  A9 00              lda    LOW_BYTE #SATB_VRAM
       00:E79B  85 F0              sta    LOW_BYTE <_di
       00:E79D  A9 0F              lda    HIGH_BYTE #SATB_VRAM
       00:E79F  85 F1              sta    HIGH_BYTE <_di
  224  00:E7A1  20 99 FE          jsr     set_write
  225  00:E7A4  E3 00 22          tia     satb,$0002,$0100 ;Blast SATB to VRAM
       00:E7A7  02 00 00  
       00:E7AA  01        
  226  00:E7AB  60                rts
#[1]   TurboForce.asm
  152                     
  153                     ;============================================================
  154                     ;============================================================
  155                     
  156           0002              .bank $2
  157           4000              .org $4000
  158                     ;BonkBG:  .incchr "INCLUDE\realBigBG.pcx",64,64
  159  02:4000            BGMap:  .incbin "INCLUDE\trt.MAP"
  160                     
  161           0003              .bank $3
  162           4000              .org $4000
  163  03:4000            bg1:    .incchr "INCLUDE\bgmap.pcx",20,8
  164                     
  165           0004              .bank $4
  166           4000              .org $4000
  167  04:4000            bg2:    .incchr "INCLUDE\bgmap.pcx",0,64,20,8
  168                     
  169           0005              .bank $5
  170           4000              .org $4000
  171  05:4000            bg3:    .incchr "INCLUDE\bgmap.pcx",0,128,20,8
  172                     
  173                             ;.bank $3
  174                             ;.org  $4000
  175                     ;BonkBG1: ;.incchr "INCLUDE\realBigBG.pcx",256,511,32,64
  176                     
  177                             ;.bank $4
  178                             ;.org  $4000
  179                     ;BonkBG2: ;.incchr "INCLUDE\realBigBG.pcx",0,256,64,32
  180                     
  181                             ;.bank $5
  182                             ;.org  $4000
  183                     ;BonkBG3: ;.incchr "INCLUDE\realBigBG.pcx",256,512,64,64
  184                     
  185                             ;.bank $6
  186                             ;.org  $4000
  187                     ;BonkBG4: ;.incchr "INCLUDE\realBigBG.pcx",256,512,64,64
  188                     
  189                             ;.bank $7
  190                             ;.org  $4000
  191                     ;BonkBG5: ;.incchr "INCLUDE\realBigBG.pcx",256,512,64,64
  192                     
  193           000A              .bank $A
  194           C000              .org  $C000
  195  0A:C000            BonkPal: .incpal "INCLUDE\realBigBG.pcx",0,11
  196  0A:C160            SprCHR:
  197  0A:C160                    .incspr "INCLUDE\Soldier.pcx",0,0,2,2
  198  0A:C360                    .incspr "INCLUDE\Soldier.pcx",32,0,2,2
  199  0A:C560                    .incspr "INCLUDE\Soldier.pcx",64,0,2,2
  200  0A:C760                    .incspr "INCLUDE\Soldier.pcx",96,0,2,2
  201  0A:C960                    .incspr "INCLUDE\Soldier.pcx",128,0,2,2
  202  0A:CB60                    .incspr "INCLUDE\Soldier.pcx",160,0,2,2
  203  0A:CD60                    .incspr "INCLUDE\Soldier.pcx",192,0,2,2
  204  0A:CF60                    .incspr "INCLUDE\Soldier.pcx",224,0,2,2
  205  0A:D160                    .incspr "INCLUDE\Soldier.pcx",256,0,2,2
  206  0A:D360                    .incspr "INCLUDE\Soldier.pcx",288,0,2,2
  207  0A:D560                    .incspr "INCLUDE\Soldier.pcx",320,0,2,2
  208  0A:D760                    .incspr "INCLUDE\Soldier.pcx",352,0,2,2
  209                     
  210  0A:D960            SPRPal:  .incpal "INCLUDE\BonkSP.pcx"
  211  0A:DB60            SPRPAlt: .incpal "INCLUDE\bonkSPAlt.pcx"
